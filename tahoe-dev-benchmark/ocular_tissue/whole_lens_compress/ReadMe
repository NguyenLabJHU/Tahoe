
general procedure to fitting parameters

-------------------------------------

units are in N, mm, N/mm^2 = MPa, ms, g, N.mm = mJ

Reese-Govinjdee finite strain viscoelastic model (implemented by Vicky Thao into Tahoe):
eta_bulk, eta_shear (MPa ms)
kappa_EQ, kappa_NEQ (MPa)
mu_EQ, mu_NEQ (MPa)

tau=relaxation time (ms)
factor_bulk=1000 (or other large number, assuming nearly incompressible material)
kappa_EQ=factor_bulk*mu_EQ
kappa_NEQ=factor_bulk*mu_NEQ
eta_bulk=tau*kappa_NEQ
eta_shear=tau*mu_NEQ

parameters fit by Dakota: tau, mu_EQ (steady state), mu_NEQ (initial)
then other parameters can be calculated by above equations

-------------------------------------

Usually, it is a good idea to run lens_compress_serial.xml first with an initial guess of the parameters to make sure the Tahoe input file and mesh are correct, before using Dakota to do a parameter study and optimization.

to put in the background, and have the screen output to file outscreen, type

tahoe_s -f lens_compress_serial.xml >& outscreen &

then,

algebra lens_compress_serial.io4.exo R.exo

within algebra:
R=sum(F_D_Y)
save all
exit

blot R.exo
within blot:
tplot 
typlot
R
pl
neutral
quit

this generates a R.xmgr text file that must be edited to remove extra lines for
plotting. After editing, rename the file

mv R.xmgr R.txt

then use gnuplot:

gnuplot plot_compare_single.gnu

edit plot_compare_single.gnu file to plot against High or Low data sets

-------------------------------------

*BEFORE you run pstudy.in, you should make sure you are running the parameter search in Dakota in a scratch directory.  For example, on one of the soils-served computers, such as osier, type

cd /osier/scratch
mkdir username (where you put your username)
cd username
cvs -d username@tahoe.colorado.edu:/cvs/private/tahoe checkout development_benchmark_XML (in place of username, put your username on the tahoe colorado server)

Then cd to a directory:
cd development_benchmark_XML/ocular_tissue/whole_lens_compress/...

to update the directory once created (from within the development_benchmark_XML dir):
cvs update -Pd

1) use pstudy.in first to do a parameter study to find a range of parameters from which to attempt to optimize

- to run Dakota in parallel, comment out all clean commands in the .csh file and also uncomment file save commands in the respective dakota .in files; MAKE SURE you do not use more processors than there are parameter increments

- if running Dakota again in parallel, clean out all files manually (i.e., using rm) in the respective directory: 

rm -f dakota* error_func.in.* error_func.out.* idr-parsed-input.txt

- if using lam-mpi, just type dakota, otherwise if using mpich, type full path to dakota in the following line

mpirun -np 2 dakota -i pstudy.in >& dakota.log &

- or in serial mode

dakota -i pstudy.in >& dakota.log &

To view the results, type

gnuplot plot_compare.gnu

The results of the FE simulation are in error_func.in.*.fvst_Y, where '*' is the simulation number, such as 12; the total number will depend on how many search simulations are conducted

*there may be modifications to this mpirun command, depending on your platform

2) after cleaning up the files, run patsearch.in to optimize once in a region of parameters with local minima

rm -f dakota* error_func.in.* error_func.out.* idr-parsed-input.txt

- in serial mode:

dakota -i patsearch.in >& dakota.log &

