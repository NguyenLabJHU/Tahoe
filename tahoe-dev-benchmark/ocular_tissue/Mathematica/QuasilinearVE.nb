(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.0'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     24465,        521]*)
(*NotebookOutlinePosition[     25429,        551]*)
(*  CellTagsIndexPosition[     25385,        547]*)
(*WindowFrame->Normal*)



Notebook[{
Cell["Define Parameters", "Subsection"],

Cell[BoxData[{
    \(\(errchk\  = \ True;\)\), "\[IndentingNewLine]", 
    \(Off[General::spell1]; 
    Off[General::spell];\[IndentingNewLine] (*\ 
      elastic\ constants\ *) \), "\[IndentingNewLine]", 
    \(alpha\  =  .616; \ beta = 29; \ mu\  = \ 100; 
    gamma =  .49/\((1 - 2\  .49)\);\), "\n", 
    \(alphaneq\  = 1.078; \ betaneq = 29; \ muneq\  = \ 100; 
    gammaneq =  .49/\((1 - 2\  .49)\);\), "\[IndentingNewLine]", 
    \(alpha0 = \ alpha + alphaneq; \ 
    mu0\  = \ mu + muneq;\), "\[IndentingNewLine]", 
    \(p = 0; eta0 = 3.5*100000*\((500)\)^p;\), "\[IndentingNewLine]", 
    \(num = 
      12; \  (*\ \(! \(! \(! \ num\ does\ not\ appear\ elsewhere\)\)\), \ 
      is\ it\ the\ scaling\ of\ the\ orientation\ \(\(PDF\)\(?\)\)\ *) \n\
\[IndentingNewLine] (*\ 
      relaxation\ kernel\ constants\ *) \[IndentingNewLine] (*\ 
      Fung\ *) \[IndentingNewLine]tau2\  = \ 1000; \ tau1 = \ 1;\), "\n", 
    \(\(ginf = \((alpha*beta^2 + mu)\)/\((alpha*beta^2 + alphaneq*beta^2 + 
              mu + muneq)\);\)\), "\n", 
    \(\(\(c = \((\ 1/ .38\  - 1)\)/Log[tau2/tau1];\)\(\[IndentingNewLine]\)
    \) (*\ Prony\ *) \), "\[IndentingNewLine]", 
    \(\(taus = \ {1000, 100, 10, 1};\)\), "\[IndentingNewLine]", 
    \(Cs = {1.0, 1.0, 1.0, 1.0}*
        ginf; \  (*\ ?? \(?\ 
          need\ to\ normalize\)\ *) \[IndentingNewLine]Fung = 
      False;\[IndentingNewLine]\), "\[IndentingNewLine]", 
    \(<< Graphics`\)}], "Input"],

Cell["Constitutive Relations", "Subsection"],

Cell[BoxData[
    \(\(\( (*\ fiber\ *) \)\(\ \)\( (*\ 
      compressive\ behavior\ ?? \ *) \)\(\[IndentingNewLine]\)\(\(Wf[
          l_]\  = \ alpha0 \((\ Exp[beta \((l - 1)\)] - beta\ l)\);\)\(\n\)
    \(Wfp[l_]\  = \ D[Wf[l], l];\)\(\n\)
    \(Wfpp[l_]\  = \ D[Wfp[l], l];\)\(\n\)\(\[IndentingNewLine]\)\( (*\ 
      orientation\ *) \)\(\[IndentingNewLine]\)
    \(Theta\  = {Cos[t], \ Sin[t]};\)\(\n\)
    \(MatrixForm[M\  = \ Outer[Times, Theta, \ Theta]];\)\(\n\)
    \(I4\  = \ \ l1^2\ Cos[t]^2 + 
          l2^2\ Sin[
                t]^2;\)\(\[IndentingNewLine]\)\(\[IndentingNewLine]\)\( (*\ 
      fiber\ traction\ along\ principal\ directions\ *) \)\(\
\[IndentingNewLine]\)
    \(sf1[l1_, l2_, l3_]\ \  = \ 2\ Wfp[I4]\ \ M[\([1, 1]\)]\ ;\)\(\n\)
    \(sf2[l1_, l2_, l3_]\ \  = \ 
        2\ Wfp[I4]\ \ M[\([2, 
              2]\)];\)\(\ \)\(\[IndentingNewLine]\)\(\[IndentingNewLine]\)\( \
(*\ elasticity\ \(tensor\  : \ 
          2\ dW/dI\ dI/dC\)\ *) \)\(\[IndentingNewLine]\)
    \(kf11[l1_, l2_, l3_]\  = \ 
        4\ Wfpp[I4]\ M[\([1, 1]\)]\ M[\([1, 1]\)]\ ;\)\(\n\)
    \(kf12[l1_, l2_, l3_]\  = \ 
        4\ Wfpp[I4]\ M[\([1, 1]\)]\ M[\([2, 2]\)]\ ;\)\(\n\)
    \(kf22[l1_, l2_, l3_]\  = \ 
        4\ Wfpp[I4]\ M[\([2, 2]\)]\ M[\([2, 
              2]\)]\ ;\)\(\[IndentingNewLine]\)\(\[IndentingNewLine]\)\( (*\ 
      homogenization\ integral, \ 
      isotropic\ \ has\ analytic\ forms\ *) \)\(\[IndentingNewLine]\)
    \(H\  = 
        1.0/\((2.0\ Pi)\)\ NIntegrate[#1\ , {t, \(-Pi\), Pi}, 
              AccuracyGoal \[Rule] 10]\  &;\)\(\[IndentingNewLine]\)
    \( (*\ \(! \(! \(! \ 
            num\ \(\(here\)\(\ \)\(?\)\)\)\)\)\ *) \)\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      matrix, \ \(\(neohookean\)\(?\)\)\ *) \)\(\[IndentingNewLine]\)\(\(J = 
        l1\ l2\ l3;\)\[IndentingNewLine]
    \(Um[l1_, l2_, l3_]\  = \ 
        mu0/2 \((l1^2 + l2^2 + l3^2 - 3)\)\  + \ 
          mu0/\((2\ gamma)\)\ \((J^\((\(-2\) gamma)\)\  - 
                1)\);\)\[IndentingNewLine]\[IndentingNewLine] (*\ 
      2  PK\ principal\ \(stress\  : \ 
          2  dU/dl\ dl/dC\)\ *) \[IndentingNewLine]
    \(sm1[l1_, l2_, l3_]\  = \ D[Um[l1, l2, l3], l1]/l1;\)\n
    \(sm2[l1_, l2_, l3_]\  = \ D[Um[l1, l2, l3], l2]/l2;\)\n
    \(sm3[l1_, l2_, l3_]\  = \ 
        D[Um[l1, l2, l3], l3]/l3;\)\[IndentingNewLine]\[IndentingNewLine] (*\ 
      elasticity\ tensor\ 2  dS/dC\  = \ 2\ dS/dl\ dl/dC*) \n
    \(Cm11[l1_, l2_, l3_]\  = \ 
        D[sm1[l1, l2, l3], l1]/l1;\)\[IndentingNewLine]
    \(Cm12[l1_, l2_, l3_]\  = \ 
        D[sm1[l1, l2, l3], l2]/l2;\)\[IndentingNewLine]
    \(Cm13[l1_, l2_, l3_]\  = \ 
        D[sm1[l1, l2, l3], l3]/l3;\)\[IndentingNewLine]
    \(Cm22[l1_, l2_, l3_]\  = \ 
        D[sm2[l1, l2, l3], l2]/l2;\)\[IndentingNewLine]
    \(Cm23[l1_, l2_, l3_]\  = \ 
        D[sm2[l1, l2, l3], l3]/l3;\)\[IndentingNewLine]
    \(Cm33[l1_, l2_, l3_]\  = \ 
        D[sm3[l1, l2, l3], l3]/l3;\)\[IndentingNewLine]
    \)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ \(total\ 2  
            PK\ stress\  &\)\ elasticity\ tensor\ \
*) \)\(\[IndentingNewLine]\)\(\(stress[l1m_, l2m_, 
          l3m_]\  := \ \[IndentingNewLine]\ {H[sf1[l1m, l2m, l3m]], \ 
            H[sf2[l1m, l2m, l3m]], \ 0}\  + \n\ {\ sm1[l1m, l2m, l3m], \ 
            sm2[l1m, l2m, l3m], \ 
            sm3[l1m, l2m, 
              l3m]};\)\[IndentingNewLine]\[IndentingNewLine]\
\[IndentingNewLine]
    \(stiffness[l1m_, l2m_, l3m_]\  := \ 
        Module[{CF11, \ CF12, \ CF22, CM11, CM12, CM13, CM22, CM23, CM33, 
            C}, \[IndentingNewLine]CF11 = \ 
            H[kf11[l1m, l2m, l3m]]; \[IndentingNewLine]CF12 = \ 
            H[kf12[l1m, l2m, l3m]]; \[IndentingNewLine]CF22 = \ 
            H[kf22[l1m, l2m, l3m]]; \[IndentingNewLine]CM11 = 
            Cm11[l1m, l2m, l3m]; \[IndentingNewLine]CM12 = 
            Cm12[l1m, l2m, l3m]; \[IndentingNewLine]CM13 = 
            Cm13[l1m, l2m, l3m]\ ; \[IndentingNewLine]CM22 = 
            Cm22[l1m, l2m, l3m]\ ; \[IndentingNewLine]CM23 = 
            Cm23[l1m, l2m, l3m]\ ; \[IndentingNewLine]CM33 = 
            Cm33[l1m, l2m, 
              l3m]\ ; \[IndentingNewLine]C = {{CF11 + CM11, CF12 + CM12, 
                CM13}, \[IndentingNewLine]{CF12 + CM12, CF22 + CM22, 
                CM23}, \[IndentingNewLine]{CM13, CM23, 
                CM33}}; \[IndentingNewLine]C\[IndentingNewLine]];\)\
\[IndentingNewLine]\[IndentingNewLine]
    \(Print["\<initial stress:\>", 
        MatrixForm[s0 = stress[1, 1, 1]]];\)\[IndentingNewLine]
    \(Print["\<initial stiffness:\>", 
        MatrixForm[
          K0 = stiffness[1, 1, 1]]];\)\[IndentingNewLine]\[IndentingNewLine]
    \(If[errchk, \[IndentingNewLine]\(Show[\[IndentingNewLine]Plot[
              Part[stress[s, 1, 1], 1], {s, 0.8, 
                1.2}], \[IndentingNewLine]Plot[
              Part[stress[1, s, 1], 2], {s, 0.8, 1.2}, 
              PlotStyle \[Rule] RGBColor[1, 0, 0]], \[IndentingNewLine]Plot[
              Part[stress[1, 1, s], 2], {s, 0.8, 1.2}, 
              PlotStyle \[Rule] 
                RGBColor[0, 0, 
                  1]]\[IndentingNewLine]];\)\[IndentingNewLine]];\)\)\)\)], \
"Input"],

Cell[BoxData[
    \(\(\( (*\ 
      Fung' s\ relaxation\ function\ *) \)\(\[IndentingNewLine]\)\(\(E1[
          x_]\  = \ ExpIntegralE[1, x];\)\[IndentingNewLine]
    \(GF[t_]\  = \ \ ginf \((1\  + \ 
              c\ \((\ E1[t/tau2] - E1[t/tau1])\))\);\)\[IndentingNewLine] (*\ 
      Prony\ series\ *) \[IndentingNewLine]
    \(GP[t_] = 
        Sum[Cs[\([\)\(i\)\(]\)]*Exp[\(-t\)/taus[\([\)\(i\)\(]\)]], {i, 
            Length[taus]}];\)\[IndentingNewLine]\[IndentingNewLine]
    \(If[Fung, \[IndentingNewLine]G[t_]\  = \ 
          GF[t]; \[IndentingNewLine]G0\  = \ 
          ginf \((1\  + \ 
                c\ \((Limit[\ E1[t/tau2] - E1[t/tau1], 
                      t \[Rule] 0])\))\);, \[IndentingNewLine]G[t_] = 
          GP[t]; \[IndentingNewLine]G0 = 
          Limit[G[t], t \[Rule] 0];\[IndentingNewLine]];\)\[IndentingNewLine]
    \(Goo = Limit[G[t], t \[Rule] Infinity];\)\[IndentingNewLine]
    \(dG[t_]\  = D[G[t], t];\)\n
    \(dG0 = 
        Limit[dG[t], t \[Rule] 0];\)\[IndentingNewLine]\[IndentingNewLine]
    \(tolG\  = \ 10^\((\(-8\))\);\)\[IndentingNewLine]
    \(tmax = 
        t /. FindRoot[
            dG[t] \[Equal] \(-tolG\), {t, 
              2}];\)\[IndentingNewLine]\[IndentingNewLine]
    \(If[errchk, \[IndentingNewLine] (*\ \(Print[
              G[t]];\)\ *) \[IndentingNewLine]plG = 
          Plot[G[10^t], {t, \(-2\), 5}, PlotLabel -> "\<G(log(t))\>", 
            PlotRange \[Rule] All]; \[IndentingNewLine]pldG = 
          Plot[dG[10^t], {t, \(-2\), 5}, PlotLabel -> "\<dG(log(t))\>", 
            PlotRange \[Rule] 
              All]; \[IndentingNewLine] (*\ \(Print["\<c :\>", 
              c, \ "\< ginf \>", \ 
              ginf];\)\ *) \[IndentingNewLine]Print["\<G[0] :\>", \ 
          G0, \ "\<, G[oo] :\>", 
          Goo]; \[IndentingNewLine]Print["\<dG[0] :\>", \ 
          dG0]; \[IndentingNewLine]Print["\<cutoff time:\>", \ 
          tmax, "\< for tolerance: \>", \ 
          N[tolG]];\[IndentingNewLine]];\)\[IndentingNewLine]\
\[IndentingNewLine]
    \(Show[\[IndentingNewLine]Plot[GF[10^t], {t, \(-2\), 5}, 
          PlotStyle \[Rule] RGBColor[1, 0, 0]], \[IndentingNewLine]Plot[
          GP[10^t], {t, \(-2\), 5}], PlotLabel -> "\<G(log(t))\>", 
        PlotRange \[Rule] All\[IndentingNewLine]];\)\)\)\)], "Input"],

Cell["Solver ", "Subsection"],

Cell[BoxData[
    \(\(strainHistory[dt_, \ sh_] := \ 
        Module[{maxClockTime\  = \ 60*5, ntsteps = 0, ts = {}, 
            tolR\  = \ 10^\((\(-8\))\), sigma, sigma0, sigint, errorR, 
            Gscale, Gs = {}, dGs = {}, l1m = 1, l2m = 1, l3m = 1, 
            convolve = True, outInt = 100, 
            errchk = 
              False}, \[IndentingNewLine]\[IndentingNewLine] (*allot\ space\ \
*) \[IndentingNewLine]ntsteps\  = \ 
            First[Dimensions[
                sh]]; \[IndentingNewLine]Print["\<number of timesteps: \>", 
            ntsteps, "\<, total time: \>", 
            dt*\((ntsteps - 1)\)]; \[IndentingNewLine]ts = 
            Range[0, dt*\((ntsteps - 1)\), dt]; \[IndentingNewLine]sigint = \ 
            Table[{0, 0, 0}, {k, 
                ntsteps}]; \ \[IndentingNewLine]stretches\  = \ 
            sigint; \[IndentingNewLine]\[IndentingNewLine]time0 = \ 
            TimeUsed[]; \
\[IndentingNewLine]TimeConstrained[\[IndentingNewLine]\[IndentingNewLine] (*\ 
              compute\ dG\ on\ uniform\ time\ grid, \ 
              and\ truncate\ if\ long\ time\ history\ \
*) \[IndentingNewLine]If[Last[ts] > \ tmax, \ 
              Print["\<can truncate dG\>"]]; \[IndentingNewLine]dGs\  = 
              Map[dG, Drop[ts, 1]]; \[IndentingNewLine]Gs\  = 
              Map[G, Drop[ts, 1]]; \[IndentingNewLine]Gscale\  = \ 
              G0 + dt*dG0; \[IndentingNewLine]Print["\<Gscale: \>", \ 
              Gscale, "\<, last dG : \>", 
              Last[dGs]]; \[IndentingNewLine]\[IndentingNewLine]For[
              m\  = \ 1, \ 
              m \[LessEqual] ntsteps, \ \(m++\), \[IndentingNewLine]time0 = 
                TimeUsed[]; \[IndentingNewLine]\[IndentingNewLine] (*\ 
                trial\ 2  
                  PK\ principal\ stress\ *) \[IndentingNewLine]sigma\  = 
                stress[l1m, l2m, 
                  l3m]; \[IndentingNewLine]\[IndentingNewLine] (*\ 
                convolution : \ 
                  G0\ T\  + \ 
                    int^t_  
                      0\ dG \((t)\)\ T \((s - 
                          t)\)\ ds\ *) \[IndentingNewLine]sigma0 = 
                dt*Take[dGs, m - 1] . Reverse[Take[sigint, m - 1]]; \  (*\ 
                fixed\ part\ of\ the\ stress\ *) \[IndentingNewLine]sigma\  = 
                Gscale*sigma + 
                  sigma0; \[IndentingNewLine]\[IndentingNewLine]\
\[IndentingNewLine] (*\ force\ balance\ *) \[IndentingNewLine]Rext\  = 
                sh[\([m]\)]/\ {l1m, l2m, \ l3m}; \[IndentingNewLine]Res0\  = 
                Rext - sigma; \[IndentingNewLine]errorR\  = \ 
                Sqrt[Res0 . 
                    Res0]; \ \[IndentingNewLine]\[IndentingNewLine]errors\  = \
\ {}; \[IndentingNewLine]While[\((\ 
                  errorR\  > \ tolR)\), \[IndentingNewLine] (*\ 
                  stiffness\ *) \[IndentingNewLine]K = \ 
                  stiffness[l1m, l2m, l3m] . 
                    DiagonalMatrix[{l1m, l2m, 
                        l3m}]; \[IndentingNewLine]\[IndentingNewLine] (*\ 
                  derivative\ of\ convolution\ *) \ \[IndentingNewLine]K\  *= 
                  Gscale; \[IndentingNewLine]K -= 
                  DiagonalMatrix[\(-sh[\([m]\)]\)/{l1m*l1m, \ l2m*l2m, 
                        l3m*l3m}]; \
\[IndentingNewLine]\[IndentingNewLine]{l1m, \ l2m, l3m}\  += \ 
                  Inverse[K] . Res0; \[IndentingNewLine]If[
                  l1m \[LessEqual] 0 || l2m \[LessEqual] 0 || 
                    l3m \[LessEqual] 0, 
                  Print["\<negative stretch : \>", {l1m, \ l2m, l3m}]; 
                  Abort[]\ ]; \[IndentingNewLine]\[IndentingNewLine] (*\ 
                  new\ elastic\ stress\ *) \[IndentingNewLine]sigma\  = \ \
\(sigint[\([m]\)] = 
                    stress[l1m, l2m, 
                      l3m]\); \[IndentingNewLine]\[IndentingNewLine] (*\ 
                  convolution\ *) \[IndentingNewLine]sigma\  = 
                  Gscale*sigma + 
                    sigma0; \[IndentingNewLine]\[IndentingNewLine] (*\ 
                  force\ balance\ *) \[IndentingNewLine]Rext\  = 
                  sh[\([m]\)]/\ {l1m, l2m, \ 
                      l3m}; \[IndentingNewLine]Res0\  = 
                  Rext - sigma; \[IndentingNewLine]errorR\  = \ 
                  Sqrt[Res0 . Res0]; \[IndentingNewLine]If[errchk, 
                  Print[m, "\< Log error: \>", 
                    Log[10, errorR]]]; \[IndentingNewLine]AppendTo[errors, 
                  errorR];\[IndentingNewLine]]; \[IndentingNewLine]\
\[IndentingNewLine]If[
                Mod[m, outInt] \[Equal] 0, \[IndentingNewLine]Print[
                  m, "\< time :\>", 
                  time\  = TimeUsed[] - time0]; \[IndentingNewLine]If[
                  errchk\  && \ 
                    Length[errors] > 0, \[IndentingNewLine]ListPlot[
                    Table[{i^2, Log[errors[\([i]\)]]}, {i, Length[errors]}], 
                    PlotJoined \[Rule] True, 
                    PlotStyle \[Rule] RGBColor[1, 0, 0], 
                    PlotLabel -> "\<error\>"]; \[IndentingNewLine]Print[
                    MatrixForm[{l1m, l2m, l3m}], "\<->\>", 
                    MatrixForm[
                      sigma]];\[IndentingNewLine]]]; \[IndentingNewLine]\
\[IndentingNewLine]sigint[\([m]\)] = 
                sigma; \[IndentingNewLine]stretches\ [\([m]\)]\  = \ {l1m, 
                  l2m, l3m};\[IndentingNewLine]];\[IndentingNewLine], \
\[IndentingNewLine]maxClockTime, 
            Print["\<----timed out----   maxClockTime: \>", 
              maxClockTime]\[IndentingNewLine]]; \[IndentingNewLine]stretches\
\[IndentingNewLine]];\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      test\ w/\ strain \[Rule] \(stress \[Rule] 
          strain\)\ *) \)\(\[IndentingNewLine]\)\(\(dt\  = \ 0.01;\)\n
    \(ts = Table[t, {t, 0\ dt, 20  dt, dt}];\)\n
    \(Print["\<number of time-steps :\>", 
        ntsteps = Length[ts]];\)\[IndentingNewLine]\[IndentingNewLine] (*\ 
      strain\ history\ *) \[IndentingNewLine]
    \(sinit = \ 1.0;\)\ \[IndentingNewLine]
    \(shold = 1.1;\)\ \[IndentingNewLine]
    \(sramp\  = 0.01;\)\[IndentingNewLine]
    \(sh = 
        Table[{sinit, Min[sinit + sramp\ i, shold], sinit}, {i, 0, 
            ntsteps - 1}];\)\[IndentingNewLine]
    \(pl = \[IndentingNewLine]Show[
          Table[\[IndentingNewLine]ListPlot[
              Transpose[{ts, Part[Transpose[sh], i]}], 
              PlotJoined \[Rule] True, 
              PlotLabel \[Rule] "\<applied strain history\>", 
              PlotRange \[Rule] All], {i, 
              3}\[IndentingNewLine]]];\)\[IndentingNewLine]\[IndentingNewLine]\
\[IndentingNewLine] (*\ stress\ history\ *) \n
    \(dGs\  = \ Join[{dG0}, Map[dG, Drop[ts, 1]]];\)\ \[IndentingNewLine]
    \(Tes\  = \ 
        MapThread[stress, 
          Transpose[sh]];\)\[IndentingNewLine]\[IndentingNewLine]
    \(Ts = 
        G0*Take[Tes, ntsteps] + 
          dt*Table[
              Take[dGs, i] . Reverse[Take[Tes, i]], {i, 
                ntsteps}];\)\[IndentingNewLine]
    \(Ts = Apply[Times, {Ts, sh}];\)\[IndentingNewLine]
    \(Th\  = Ts;\)\[IndentingNewLine]\[IndentingNewLine]
    \(Show[\[IndentingNewLine]ListPlot[
          Transpose[{ts, Part[Transpose[Tes], 2]}], PlotJoined \[Rule] True, 
          PlotStyle \[Rule] RGBColor[1, 0, 0]], \[IndentingNewLine]ListPlot[
          Transpose[{ts, Part[Transpose[Th], 2]}], PlotJoined \[Rule] True, 
          PlotLabel \[Rule] "\<applied stress history\>", 
          PlotRange \[Rule] 
            All]\[IndentingNewLine]];\)\n\[IndentingNewLine] (*\ 
      compute\ strain\ history\ *) \[IndentingNewLine]
    \(lh\  = strainHistory[dt, Th];\)\n
    \(RGB\  = \ {RGBColor[1, 0, 0], RGBColor[0, 1, 0], 
          RGBColor[0, 0, 1]};\)\n
    \(Show[\[IndentingNewLine]pl, \
\[IndentingNewLine]Table[\[IndentingNewLine]ListPlot[
            Transpose[{ts, Part[Transpose[lh], i]}], PlotJoined \[Rule] True, 
            PlotLabel \[Rule] "\<strain history\>", PlotRange \[Rule] All, 
            PlotStyle \[Rule] RGB[\([i]\)]], \ \[IndentingNewLine]{i, 
            3}]\[IndentingNewLine]];\)\n\n
    \)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      experimental\ data\ *) \)\(\[IndentingNewLine]\)\(\(stream\  = \ 
        OpenRead["\<nt02b-cycC\>"];\)\n
    \(header = \ Read[stream, String];\)\n
    \(data = 
        ReadList[
          stream, {Number, Number, Number, Number, Number, Number}];\)\n
    \(Close[stream];\)\n
    \(Print["\< header: \>"];\)\n
    \(Print[header];\)\n
    \(Print["\<read array : \>", Dimensions[data]];\)\n
    data\  = \ Drop[data, 4]; \  (*\ 
      oddness\ in\ first\ samples\ *) \[IndentingNewLine]Print["\<start time \
:\>", time0 = \ First[\ Part[Transpose[data], 2]]];\n
    \(expTime = \ Part[Transpose[data], 2] - time0;\)\n
    \(edts = 
        Drop[RotateLeft[expTime] - expTime, \(-1\)];\)\[IndentingNewLine]
    \(Print["\<max/min dt : \>", Max[edts], \ "\< \>", \ 
        Min[edts]];\)\[IndentingNewLine]
    \(ListPlot[edts, PlotJoined \[Rule] True, 
        PlotRange \[Rule] All];\)\[IndentingNewLine]
    \(expStress\  = \ Part[Transpose[data], 5];\)\n
    \(plotExpStress = 
        ListPlot[
          Transpose[{expTime, 
              expStress}], \[IndentingNewLine]PlotStyle \[Rule] 
            RGBColor[0, 0, 
              1], \[IndentingNewLine]PlotLabel -> "\<experimental stress vs \
time\>"];\)\n
    expStrain = \ 
      1.0 + Part[Transpose[data], 6]; \  (*\ ?? \(?\ is\ this\ right\)\ *) \n
    plotExpStrain = 
      ListPlot[Transpose[{expTime, expStrain}], 
        PlotStyle \[Rule] RGBColor[0, 0, 1], 
        PlotLabel -> "\<experimental strain vs time\>"];\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      simple\ fit\ *) \)\(\[IndentingNewLine]\)\(\(ts\  = \ {0, 2.5, 162.5, 
          165, 320};\)\n
    \(ss\  = \ {0, 100, 100, 2, 2};\)\n
    \(s$t\  = \ Transpose[{ts, ss}];\)\n
    \(dts\  = \ 
        Table[\ \((ts[\([i + 1]\)] - ts[\([i]\)])\)\ , \ {i, 1, \ 
            Length[ts] - 1}];\)\n
    \(ds$dt\  = \ 
        Table[\((ss[\([i + 1]\)] - ss[\([i]\)])\)\ /\ dts[\([i]\)]\ , \ {i, 
            1, \ Length[dts]}];\)\[IndentingNewLine]
    ds$t = 
      Join[{First[ds$dt]}, \ 
        Drop[RotateLeft[ds$dt] - 
            ds$dt, \(-1\)]]\[IndentingNewLine]\[IndentingNewLine]
    \(as[t_]\  = 
        First[ss] + 
          Sum[ds$t[\([i]\)]*\((t - ts[\([i]\)])\)*
              UnitStep[t - ts[\([i]\)]], {i, 
              Length[ds$t]}];\)\[IndentingNewLine]
    \(Show[\[IndentingNewLine]plotExpStress, \[IndentingNewLine]Plot[
          as[t], {t, First[ts], Last[ts]}], \[IndentingNewLine]ListPlot[s$t, 
          PlotJoined \[Rule] True, \ 
          PlotStyle \[Rule] 
            RGBColor[1, 0, 0]]\[IndentingNewLine]];\)\[IndentingNewLine]
    \)\)\)], "Input"],

Cell[BoxData[
    \(\(Interpolate[th_, thB_, yhB_]\  := \ 
        Module[{t1, t2, y1, y2, j = 1, t, y, 
            yh = {}}, \[IndentingNewLine]t1 = thB[\([j]\)]; 
          t2 = thB[\([j + 1]\)]; y1 = yhB[\([j]\)]; 
          y2 = yhB[\([j + 1]\)]; \[IndentingNewLine]For[i = 1, 
            i \[LessEqual] Length[th], \(i++\), \[IndentingNewLine]t = 
              th[\([i]\)]; \[IndentingNewLine]While[t > t2, \(j++\); 
              t1 = thB[\([j]\)]; t2 = thB[\([j + 1]\)]; y1 = yhB[\([j]\)]; 
              y2 = yhB[\([j + 1]\)]]; \[IndentingNewLine]AppendTo[yh, 
              y = y1 + \((y2 - 
                        y1)\)*\((t - t1)\)/\((t2 - 
                          t1)\)]; \[IndentingNewLine] (*\ \(Print[
                  i, \ "\< \>", 
                  y];\)\ *) \[IndentingNewLine]]; \[IndentingNewLine]yh\
\[IndentingNewLine]];\)\)], "Input"],

Cell[BoxData[{
    \(\(dt = 0.1;\)\), "\[IndentingNewLine]", 
    \(\(th\  = 
        Take[\ Range[First[expTime], Last[expTime], dt], 
          Length[expTime]];\)\), "\[IndentingNewLine]", 
    \(\(eshA = Interpolate[th, expTime, expStress];\)\  (*\ 
      vs\ Map[as, th]\ *) \), "\[IndentingNewLine]", 
    \(\(eshI = Map[as, th];\)\), "\[IndentingNewLine]", 
    \(\(Th = \ 
        Transpose[{0*th, eshA, 0*th}];\)\n (*\(\(\(\ \)\(Print[
            MatrixForm[
              Th]]\)\(]\)\);\)\ *) \[IndentingNewLine]\[IndentingNewLine]\), \
"\[IndentingNewLine]", 
    \(\(Show[\[IndentingNewLine]plotExpStress, \[IndentingNewLine]ListPlot[
          Transpose[{th, eshA}], 
          PlotJoined \[Rule] True], \[IndentingNewLine]ListPlot[
          Transpose[{th, eshI}], PlotJoined \[Rule] True, 
          PlotStyle \[Rule] 
            RGBColor[0, 1, 0]]\[IndentingNewLine]];\)\)}], "Input"],

Cell[BoxData[
    \(\(lh\  = strainHistory[dt, Th];\)\)], "Input"],

Cell[BoxData[{
    \(\(RGB\  = \ {RGBColor[1, 0, 0], RGBColor[0, 1, 0], 
          RGBColor[0, 0, 1]};\)\), "\n", 
    \(\(\(Show[\[IndentingNewLine]pls = 
          Table[\[IndentingNewLine]ListPlot[
              Transpose[{th, Part[Transpose[lh], i]}], 
              PlotJoined \[Rule] True, 
              PlotLabel \[Rule] "\<strain history\>", PlotRange \[Rule] All, 
              PlotStyle \[Rule] RGB[\([i]\)]], \ \[IndentingNewLine]{i, 
              3}]\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\)}], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      L2\ error\ *) \)\(\[IndentingNewLine]\)\(\(intStrain = 
        Interpolate[th, expTime, expStrain];\)\ \[IndentingNewLine]
    \(l2h\  = \ Part[Transpose[lh], 2];\)\[IndentingNewLine]
    \(Show[pls[\([2]\)], plotExpStrain];\)\[IndentingNewLine]
    \(Print["\<L2 error for strain history: \>", 
        error\  = \ 
          dt*Sqrt[\((l2h - intStrain)\) . \((l2h - 
                    intStrain)\)]];\)\)\)\)], "Input"]
},
FrontEndVersion->"5.0 for X",
ScreenRectangle->{{0, 1400}, {0, 1050}},
CellGrouping->Manual,
WindowSize->{1272, 945},
WindowMargins->{{Automatic, 1}, {Automatic, 0}},
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperSize"->{612, 792},
"PaperOrientation"->"Portrait",
"PostScriptOutputFile":>FrontEnd`FileName[{$RootDirectory, "home", "rjones", \
"Mathematica", "FiberAnisotropy"}, "QuasilinearVE.nb.ps", CharacterEncoding \
-> "iso8859-1"],
"Magnification"->1}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{
Cell[1754, 51, 39, 0, 38, "Subsection"],
Cell[1796, 53, 1448, 27, 331, "Input"],
Cell[3247, 82, 44, 0, 38, "Subsection"],
Cell[3294, 84, 1684, 33, 363, "Input"],
Cell[4981, 119, 1298, 27, 283, "Input"],
Cell[6282, 148, 2174, 41, 523, "Input"],
Cell[8459, 191, 2294, 44, 539, "Input"],
Cell[10756, 237, 29, 0, 38, "Subsection"],
Cell[10788, 239, 5644, 99, 1259, "Input"],
Cell[16435, 340, 2489, 50, 651, "Input"],
Cell[18927, 392, 1539, 35, 331, "Input"],
Cell[20469, 429, 1118, 26, 251, "Input"],
Cell[21590, 457, 865, 15, 171, "Input"],
Cell[22458, 474, 902, 18, 219, "Input"],
Cell[23363, 494, 66, 1, 27, "Input"],
Cell[23432, 497, 566, 11, 139, "Input"],
Cell[24001, 510, 460, 9, 91, "Input"]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

