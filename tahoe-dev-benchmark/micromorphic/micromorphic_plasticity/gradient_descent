                 while (fabs(fMicroYield_function) > dAbsTol && fabs(fMicroYield_function/fMicroYield_function_tr) > dRelTol && iter_count < iIterationMax || fabs(fYield_function) > dAbsTol && fabs(fYield_function/fYield_function_tr) > dRelTol && iter_count < iIterationMax)  
                    {
                                 	if(iter_count==0)
                                 	{
                                 	fYield_function=fYield_function_tr;
                                 	fMicroYield_function=fMicroYield_function_tr;
                                 	}
                                 	
                                 	iter_count += 1;
                    			// Temp_vec1=G(delgamma,delgammachi)
                    			Temp_vec1[0]=fYield_function;
                    			Temp_vec1[1]=fMicroYield_function;
                    			// FYi = F= (1/2) G^T.G
                   			// FYi=(1/2)*(Temp_vec1[0]*Temp_vec1[0]+Temp_vec1[1]*Temp_vec1[1]);
                    
                    			Temp_vec2[0]=fdelDelgamma;
                    			Temp_vec2[1]=fdelDelgammachi;                    

                                                                       		
                                        /* Form  dFe/dDgamma */
                                        fFp_inverse.Inverse(fFp);
                                        dFedDelgamma=0.0;
                                      	//fdGdS_n_transpose.Transpose(fdGdS_n);// done above
                                	//fCe_n_inverse.Inverse(fCe_n);                                                
                                        fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_n,fFp_n,fFp_inverse);
                                        dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
                                        dFedDelgamma*=-1;

                                        /* Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor*/
                                        dEedDelgamma.MultATB(dFedDelgamma,fFe);
                                        fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
                                        dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
                                        dEedDelgamma*=0.5;
                                      
                                       /* Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor */
                                        dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
                                       
                                       /* Forming  dS/dDgamma  S= SPK tensor*/
                                        Temp_inv=dEedDelgamma.Trace();
                                        dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*Temp_inv,fIdentity_matrix);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
                                        dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                        Temp_inv=dEpsilonedDelgamma.Trace();
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*Temp_inv,fIdentity_matrix);
                                        dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
                                        dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                        fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgamma);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);
                                        dSdDelgamma+=fTemp_matrix_nsd_x_nsd;


                                        /*Forming  dP/dDgamma (scalar) P: pressure  dP/dDgamma= (1/3)1:dS/dDgamma*/
                                        dPdDelgamma=dSdDelgamma.Trace()/3;

//
                                        /* Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor*/
                                        ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
                                        ddevSdDelgamma*=-1;
                                        ddevSdDelgamma+=dSdDelgamma;
                                    
                                        /* Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor*/
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                        InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);
                
                                        
                                        /* Forming  dc/dDgamma  c: cohesion*/
                                        //fState_variables_n_IPs(IP,khc) =Aphi;
                                        dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

                                        /* assemble the consistent tangent */
                                        dFYdDelgamma=InvddevSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);//1
                                        
                                    

                                         /* Form inverse of Chi^p*/
                                        fChip_inverse.Inverse(fChip);   
                                                                                                                                               
                                                                    
                                        /* Form dChip/dDgammachi */
                                        fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                        dChipdDgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_S_n_transpose,fTemp_matrix_nsd_x_nsd);
                  
                                	/* Forming dChie/dDgammachi*/                                          
                              		dChiedDgammachi.MultABC(fChie,dChipdDgammachi,fChip_inverse);
                                        dChiedDgammachi*=-1;
                             
                                        /* Forming dEpsilone/dDelgammachi */
                                        dEpsilonedDelgammachi=0.0;
                                        dEpsilonedDelgammachi.MultATB(fFe,dChiedDgammachi); 
                                                                                   
                                        /* Forming  d(SIGMA-S)/dDgammachi tensor*/
                                        Temp_inv=dEpsilonedDelgammachi.Trace();
                                        dSIGMA_SdDelgammachi.SetToScaled((fMaterial_Params[kEta]-fMaterial_Params[kTau])*Temp_inv,fIdentity_matrix);

                                        fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),dEpsilonedDelgammachi);
                                        dSIGMA_SdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                        fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgammachi);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),fTemp_matrix_nsd_x_nsd2);
                                        dSIGMA_SdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                        /*Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA_S/
                                        dDgammachi*/
                                        dPchidDelgammachi=dSIGMA_SdDelgammachi.Trace()/3;

                                        /* Forming  d(dev(SIGMA_S))/dDgammachi  dev(SIGMA_S): dev. part of SIGMA-S (relative stress) tensor*/
                                        ddevSIGMA_SdDelgammachi.SetToScaled(dPchidDelgammachi,fIdentity_matrix);
                                        ddevSIGMA_SdDelgammachi*=-1;
                                        ddevSIGMA_SdDelgammachi+=dSIGMA_SdDelgammachi;
                                        

                                        /* Forming  d(||dev(SIGMA-S)||)/dDgammachi  dev(SIGMA-S): dev. part of Relative stress (SIGMA-S) tensor*/
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(1/devSIGMA_S_inv,devSIGMA_S);
                                        ddevSIGMA_SdDelgammachi_inv=dMatrixT::Dot(ddevSIGMA_SdDelgammachi,fTemp_matrix_nsd_x_nsd);
                                   
                                        /* Forming  dcx/dDgammax  cx:micro-cohesion*/
                                        dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];
                                                                                                                                                                                
                                        /* assemble the consistent tangent */
                                        dFYchidDelgammachi=ddevSIGMA_SdDelgammachi_inv-(Aphi_chi*dcchidDelgammachi-Bphi_chi*dPchidDelgammachi);//2
                                        
                                        /* Forming dS/dDelgammachi */
                                        Temp_inv=dEpsilonedDelgammachi.Trace();
                                        dSdDelgammachi.SetToScaled(fMaterial_Params[kEta]*Temp_inv,fIdentity_matrix);
                                        
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgammachi);
                                        dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;
                                        
                                        fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgammachi);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);
                                        dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;
                                        
                                        /* Forming dP/dDelgammachi */
                                        dPdDelgammachi=dSdDelgammachi.Trace()/3; 
                                        
                                        
                                        /* Forming  d(devS)/dDgammachi */
                                        ddevSdDelgammachi.SetToScaled(dPdDelgammachi,fIdentity_matrix);
                                        ddevSdDelgammachi*=-1;
                                        ddevSdDelgammachi+=dSdDelgammachi;                                        
                                                                             
                                                                             
                                        /* Forming  d(||devS||)/dDgammachi */                                                                             
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                        ddevSdDelgammachi_inv=dMatrixT::Dot(ddevSdDelgammachi,fTemp_matrix_nsd_x_nsd);  
                                        
                                        /* dFy/dDelgammachi */
                                        dFYdDelgammachi=ddevSdDelgammachi_inv-(-Bphi*dPdDelgammachi);//3                                        
                                        
                                        /* Forming d(SIGMA-S)/dDelgamma */
                                        Temp_inv=dEedDelgamma.Trace();
                                        dSIGMA_SdDelgamma.SetToScaled(fMaterial_Params[kTau]*Temp_inv,fIdentity_matrix);

                                        fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],dEedDelgamma);
                                        dSIGMA_SdDelgamma+=fTemp_matrix_nsd_x_nsd;                                        

                                        Temp_inv=dEpsilonedDelgamma.Trace();
                                        fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kEta]-fMaterial_Params[kTau])*Temp_inv,fIdentity_matrix);
                                        dSIGMA_SdDelgamma+=fTemp_matrix_nsd_x_nsd;      
                                                                          

                                       	fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),dEpsilonedDelgamma);
                                        dSIGMA_SdDelgamma+=fTemp_matrix_nsd_x_nsd;                                        

                                        fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgamma);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),fTemp_matrix_nsd_x_nsd2);
                                        dSIGMA_SdDelgamma+=fTemp_matrix_nsd_x_nsd;      

                                        /* Forming dPchi/dDelgamma */
                                        dPchidDelgamma=dSIGMA_SdDelgamma.Trace()/3;   

                                        /* Forming  d(dev(SIGMA-S))/dDgamma */
                                        ddevSIGMA_SdDelgamma.SetToScaled(dPchidDelgamma,fIdentity_matrix);
                                        ddevSIGMA_SdDelgamma*=-1;
                                        ddevSIGMA_SdDelgamma+=dSIGMA_SdDelgamma;                                                 
 
 
                                         /* Forming  d(||dev(SIGMA-S)||)/dDgamma */                                                                             
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(1/devSIGMA_S_inv,devSIGMA_S);
                                        ddevSIGMA_SdDelgamma_inv=dMatrixT::Dot(ddevSIGMA_SdDelgamma,fTemp_matrix_nsd_x_nsd);  
                                        
                                        
                                        /* dFYchi/dDelgamma */
                                        dFYchidDelgamma=ddevSIGMA_SdDelgamma_inv-(-Bphi_chi*dPchidDelgamma);//4       
                                        
					LocalConsistentTangent=0.0;
                                        LocalConsistentTangent(0,0)=dFYdDelgamma;
                                        LocalConsistentTangent(0,1)=dFYdDelgammachi;
                                        LocalConsistentTangent(1,0)=dFYchidDelgamma; 
                                        LocalConsistentTangent(1,1)=dFYchidDelgammachi; 
                                        
                                        
                                        //Temp_vec3=DeltaF=J^T.G, where Temp_vec1=G, LocalConsistentTangent=J
                                        LocalConsistentTangent.MultTx(Temp_vec1,Temp_vec3);   
                    			
                    			
                    			//Gammazero is taken as 0.0001 
                    			Temp_vec3*=-1;
                    			Temp_vec3+=Temp_vec2;
                                     
                                        fdelDelgamma=Temp_vec3[0];     
                                        fdelDelgammachi=Temp_vec3[1];                    			
                    
					//fdelDelgamma=fYield_function;
					//fdelDelgammachi=fMicroYield_function;
                                        /* update fDelgammachi */
                                        fDelgamma += fdelDelgamma;
					//fDelgamma += incr;

                                        /* update fDelgammachi */
                                        fDelgammachi += fdelDelgammachi;
					//fDelgammachi += incrx;
					
					
                                        if (fDelgamma < 0.0) fDelgamma = 0.0;
                                        fState_variables_IPs(IP,kDelgamma) = fDelgamma;

                                        if (fDelgammachi < 0.0) fDelgammachi = 0.0;
                                        fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
                                        

                                        fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc)
                                        + fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
                                        if (fState_variables_IPs(IP,kc) < 0.0) fState_variables_IPs(IP,kc) = 0.0;


                                        /* update cx (c_chi) ISVs */
                                        fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi)
                                        + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];
                                        if (fState_variables_IPs(IP,kc_chi) < 0.0) fState_variables_IPs(IP,kc_chi) = 0.0;


                                
                                        
                                        /* update fFp */
                               		fCe_n_inverse.Inverse(fCe_n);                                                
                                        fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_n);
                                        fTemp_matrix_nsd_x_nsd*=fDelgamma;
                                        fTemp_matrix_nsd_x_nsd += fIdentity_matrix;
                                        fFp.MultAB(fTemp_matrix_nsd_x_nsd,fFp_n);
				       		
                                        /* calculate fFp_Inverse  */
                                        fFp_inverse.Inverse(fFp);
                                        
                                        /* calculate Fe */
                                        fFe.MultAB(fDeformation_Gradient,fFp_inverse);

	                                        

                                        /* [fElastic_Right_Cauchy_Green_tensor] will be formed */
                                        fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                                        if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                                fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                        /* Update Elastic Lagrangian strain tensor E*/
                                        Elastic_LagrangianStn=fIdentity_matrix;
                                        Elastic_LagrangianStn*=-1;
                                        Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
                                        Elastic_LagrangianStn*=0.5;


                                        /* update fChip */
                                        fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                        fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_S_n_transpose,fTemp_matrix_nsd_x_nsd);
                                        fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                        fChip+=fChip_n;
                                
                                
                                        /* Form inverse of Chi^p*/
                                        fChip_inverse.Inverse(fChip);   
                                                                              
                                        /* Calculate Chie */
                                        fChie.MultAB(ChiM,fChip_inverse);
                                        
	                                 
                                        /* [fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed */
                                        fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                        if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                               fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;                                        
                                                                                                                                                     
                                        
                                        /* Update fCchie */
                                        fCchie.MultATB(fChie,fChie);
                                        
                                        /* Update PSIe */
                                        PSIe.MultATB(fFe,fChie);                                            


                                        /* Update Elastic micro strain tenso will be formed in Bbar */
                                  	Elastic_MicroStnTensor = fIdentity_matrix;
                                        Elastic_MicroStnTensor *= -1;
                                        Elastic_MicroStnTensor += PSIe;
                                        
                                       
    
                                       	/* update S stress */
                                        Temp_inv=Elastic_LagrangianStn.Trace();
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                                        SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                        SPK+=fTemp_matrix_nsd_x_nsd;

                                        Temp_inv=Elastic_MicroStnTensor.Trace();
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*fMaterial_Params[kEta],fIdentity_matrix);
                                        SPK+=fTemp_matrix_nsd_x_nsd;

                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                        SPK+=fTemp_matrix_nsd_x_nsd;

                                        fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);

                                        SPK+=fTemp_matrix_nsd_x_nsd;


                                        /*Update Relative stress SIGMA_S */

                   			Temp_inv=Elastic_LagrangianStn.Trace();
                                        SIGMA_S.SetToScaled(Temp_inv*fMaterial_Params[kTau],fIdentity_matrix);
                                	// 2sigmaE
                                    	fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                        SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                        //(eta-Tau)trEpsilon.1
                                        Temp_inv=Elastic_MicroStnTensor.Trace();
                                        fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                        SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                        //(nu-sigma)*Epsilon
                                        fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                        SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                        //(kappa-sigma)*Epsilon^T
                                        fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor);
                                        fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),fTemp_matrix_nsd_x_nsd2);
                                        SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                    
                                        /* calculate  devS stress */
                                        mean_stress=SPK.Trace()/3;//Calculating the pressure term
                                        devSPK.SetToScaled(mean_stress,fIdentity_matrix);
                                        devSPK*=-1;
                                        devSPK+=SPK;
                                                       
                                        /* Calculate ||devS|| */
                                        Temp_inv= devSPK.ScalarProduct();
                                        devfSPKinv=sqrt(Temp_inv);
                                       // fs_micromorph3D_out<<"devfSPKinv="<<devSIGMA_S_inv <<endl;            
                                       // fs_micromorph3D_out<<"mean stress="<<SPK.Trace()/3 <<endl;                                        
                                       // Calculate yield function with updated parameters
                                        fYield_function=devfSPKinv-(Aphi*(fState_variables_IPs(IP,kc))-Bphi*mean_stress);
                                                                                                                                                                                                  

                                        /* Form deviatoric SIGMA-S */
                                        mean_stress=SIGMA_S.Trace()/3;//
                                        devSIGMA_S.SetToScaled(mean_stress,fIdentity_matrix);
                                        devSIGMA_S*=-1;                            
                                        devSIGMA_S+=SIGMA_S;


                                        /* Calculate dev(SIGMA-S):dev(SIGMA-S)*/
                                        Temp_inv= devSIGMA_S.ScalarProduct();
                                        /* Calculate ||dev(SIGMA-S)|| */
                                        devSIGMA_S_inv=sqrt(Temp_inv);   

                                                          
                                                       
                                        // Calculate micro yield function with updated parameters
                                        fMicroYield_function=devSIGMA_S_inv-(Aphi_chi*(fState_variables_IPs(IP,kc_chi))-Bphi_chi*mean_stress);
                                        fs_micromorph3D_out<<"Current Macro relative residual = "<< fabs(fYield_function/fYield_function_tr)<<" && "<< "Current Micro relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << " && "<<" Yield Function="<< fYield_function<<" && "<<" Micro Yield Function = "<< fMicroYield_function << endl;                      
                    
                	}
