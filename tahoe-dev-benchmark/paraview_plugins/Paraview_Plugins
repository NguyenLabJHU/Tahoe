Simple Guide to ParaView Plugins
by Tom Buzbee
2-06-09

INTRODUCTION
-------------
ParaView <http://paraview.org> is an open source interface to VTK.
It is primarily used for visualizing scientific data with OpenGL.
This guide gives a short description of the steps involved in writing
your own plugin for ParaView.


STEPS
-------------
1) You must build ParaView. You won't be modifying its actual source,
but there isn't an SDK and you need access to its libraries. You
can get the source from
<http://paraview.org/paraview/resources/software.html> either
directly or through CVS. There are also building instructions on
the site's wiki. You need cmake and optionally ccmake to build it.
I build it like

cd path/to/paraview_source
mkdir bin
cd bin
ccmake ..
-> c to configure
-> c to configure (usually need to do it more than once)
-> g to generate makefiles
make

Note that there are also some scripts to generate distributable
bundles, such as ParaView.app for Mac OS X.

2) Now you can start writing your plugin. The ParaView interface
and metadata is all done through .xml files. Refer to
<http://paraview.org/Wiki/Plugin_HowTo> for details on how to define
the different types of plugins, i.e. readers, writers, filters,
sources, etc.. They all require a "server manager" xml to tell it
about your class(es), and some require others for UI information.
The actual classes where you do your work are plain VTK. Paraview
just wraps VTK up into a nice interface. Refer to the examples or
the actual internals to write yours.

You can also create Qt interfaces for some objects. For example,
you might want a slider that controls the size of an object. If you
have a Qt installation, you can use the Designer program to build
a panel. The widgets can be linked to certain variable names are
shared with the server manager .xml file, and this in turn can
interact with the VTK class. The HelixSource example demonstrates
this.

3) To build your program, you need to put a CMakeLists.txt file in
the source directory. The plugins page on the wiki has many examples.
Once this is in place, you can build your plugin similarly to
ParaView itself, with an added step. You need to set an environment
variable that points to your ParaView build:

export ParaView_DIR="/path/to/paraview_source/bin"
cd path/to/plugin
mkdir bin
cd bin
ccmake ..
-> c to configure
-> c to configure (usually need to do it more than once)
-> g to generate makefiles
make

4) You should now have a binary library (.so, .dylib, .dll, etc.
depending on your platform) and a .bqrc file if you wrote a Qt
interface. You now need to load them into ParaView. This can either
be done each session through ParaView's 'Tools > Manage Plugins'
menu or automatically when it loads using the PV_PLUGIN_PATH
environment variable. Consult the wiki for further details. Consult
the wiki for further details. I set it up so that ParaView automatically
loads plugins from my plugin/bin directory.

5) As of yet, there isn't a very good way to redistribute ParaView
plugins. For now, each user of your plugin most likely needs to
build both ParaView and the plugin manually.
