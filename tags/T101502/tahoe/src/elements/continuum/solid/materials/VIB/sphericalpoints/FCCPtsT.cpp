/* $Id: FCCPtsT.cpp,v 1.3 2002-09-12 17:50:02 paklein Exp $ */
/* created: paklein (03/26/1999)                                          */
/* FCC lattice of points                                                  */

#include "FCCPtsT.h"
#include <math.h>
#include <iostream.h>
#include "toolboxConstants.h"
#include "ExceptionCodes.h"


using namespace Tahoe;

const double Pi = acos(-1.0);

/* constructor */
FCCPtsT::FCCPtsT(int num_shells, double bond_length):
	fNumShells(num_shells),
	fBondLength(bond_length)
{
	/* number of nearest neighbor shells */
	if (fBondLength < 0.0) throw eBadInputValue;
	
	int num_bonds;
	switch (fNumShells)
	{
		case 1:
			num_bonds = 6;
			break;
		default:
			cout << "\n FCCPtsT::FCCPtsT: currently only support nearest neighbor bonds" << endl;
			throw eBadInputValue;			
	}	

	/* set weights */
	fJacobians.Allocate(num_bonds);
	fJacobians = 1;
}

/* print parameters */
void FCCPtsT::Print(ostream& out) const
{
	/* number of integration points */
	out << " Number of nearest neighbor shells . . . . . . . = " << fNumShells << '\n';
	out << " Number of bonds (using 4-fold symmetry) . . . . = " << fJacobians.Length() << '\n';
	out << " Bond length . . . . . . . . . . . . . . . . . . = " << fBondLength << '\n';
}

void FCCPtsT::PrintName(ostream& out) const
{
	out << "    FCC lattice\n";
}

/* generate sphere points:
*
*   theta = angle about z from x
*   phi   = angle about x from z
*
* The final orientation is generated by applied the
* theta and phi rotations in succession about the local
* axes */
const dArray2DT& FCCPtsT::SpherePoints(double phi_tr, double theta_tr)
{	
	/* set coordinates */
	SetCoords();
	
	/* reorient points */
	TransformPoints(phi_tr,theta_tr);
	
	return fPoints;
}

/* set lattice coordinates */
void FCCPtsT::SetCoords(void)
{
	/* vertex coordinate data */
	double p6[6*3] = { 1.0, 1.0, 0.0,
-1.0, 1.0, 0.0,
1.0, 0.0, 1.0,
-1.0, 0.0, 1.0,
0.0, 1.0, 1.0,
0.0,-1.0, 1.0};

	dArray2DT temp;
	switch (fNumShells)
	{
		case 1:		
			temp.Set(6,3,p6);
			break;
		default:
			throw eGeneralFail;
	}

	/* copy data */
	fPoints = temp;
	
	/* scale */
	fPoints /= fBondLength*sqrt(2.0);
}
