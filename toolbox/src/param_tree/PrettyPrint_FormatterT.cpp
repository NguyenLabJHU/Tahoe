/* $Id: PrettyPrint_FormatterT.cpp,v 1.2 2003-04-26 15:19:03 paklein Exp $ */
#include "PrettyPrint_FormatterT.h"
#include "ParameterListT.h"
#include "ParameterT.h"

#include <iomanip.h>
#include <math.h>

using namespace Tahoe;
const int kLineLength = 50;

PrettyPrint_FormatterT::PrettyPrint_FormatterT(void):
	fDots(kLineLength+1)
{
	fDots[0] = fDots[kLineLength] = '\0';
}

bool PrettyPrint_FormatterT::InitParameterFile(ostream& out) const
{
	out << "# Generated by Tahoe::PrettyPrint_FormatterT $Revision: 1.2 $\n";
	return true;
}

bool PrettyPrint_FormatterT::WriteParameterList(ostream& out, const ParameterListT& list) const
{
	out << '\n';

	/* non-const this */
	PrettyPrint_FormatterT* non_const_this = (PrettyPrint_FormatterT*) this;

	/* set parameter path */
	non_const_this->fLastPath = fPath;
	if (fPath.StringLength() > 0) non_const_this->fPath.Append("::");
	non_const_this->fPath.Append(list.Name());
	out << "start: " << fPath << '\n';

	/* name and description */
	if (list.Description().StringLength() > 0)
		out << "description: " << list.Description() << '\n';
	
	/* parameters */
	const ArrayT<ParameterT>& params = list.Parameters();
	for (int i = 0; i < params.Length(); i++) {
		if (params[i].Description().StringLength() > 0)
			out << "description: " << params[i].Description() << '\n';
		out << params[i].Name() << Dots(params[i].Name()) << " = " << params[i] << '\n';
	}

	/* nested parameter lists */
	const ArrayT<ParameterListT>& nested_lists = list.Lists();
	for (int i = 0; i < nested_lists.Length(); i++)
		WriteParameterList(out, nested_lists[i]);

	/* restore the path */
	out << "end: " << fPath << '\n';
	non_const_this->fPath = fLastPath;
	return true;
}

bool PrettyPrint_FormatterT::CloseParameterFile(ostream& out) const
{
#pragma unused(out)
	return true;
}

bool PrettyPrint_FormatterT::InitDescriptionFile(ostream& out) const 
{
#pragma unused(out)
	return false;
}
bool PrettyPrint_FormatterT::CloseDescriptionFile(ostream& out) const 
{
#pragma unused(out)
	return false;
}
bool PrettyPrint_FormatterT::WriteDescription(ostream& out, const ParameterListT& list) const 
{
#pragma unused(out)
#pragma unused(list)
	return false;
}

/*************************************************************************
 * Private
 *************************************************************************/

/* return a row of dots which pads the given string */
const StringT& PrettyPrint_FormatterT::Dots(const StringT& str) const
{
	PrettyPrint_FormatterT* non_const_this = (PrettyPrint_FormatterT*) this;
	
	StringT& dots = non_const_this->fDots;
	char* p = dots.Pointer();
	int flip = int(fmod(str.StringLength(), 2.0));
	for (int i = str.StringLength(); i < kLineLength; i++)
	{
		if (flip == 1) {
			*p++ = '.';
			flip = 0;
		} else {
			*p++ = ' ';
			flip = 1;
		}
	}
	
	/* terminate */
	*p = '\0';

	return fDots;
}
