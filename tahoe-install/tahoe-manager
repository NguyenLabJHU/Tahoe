#!/usr/bin/perl -w
#------------------------------------------------------------------------------
# tahoe-manager: 
#    a PERL script to checkout, configure, build and run regression tests
#    for TAHOE
# written by: 
#    Reese Jones (rjones@sandia.gov) and Patrick Klein (paklein@sandia.gov)
#------------------------------------------------------------------------------

# initialization
initialize();

# loop through arguments and options
$script_status = 0;
if (@ARGV < 1) {usage(); exit 0;}
ARG: while (@ARGV) {
	OPT: for (shift@ARGV) {
		$count = @ARGV;
		if ($script_status > 0 )   { failed();}
		if (/^u|update/i)          { update(); next ARG; }
		if (/^r|rebuild/i)         { rebuild(); next ARG; }
		if (/^b|build/i)           { build(); next ARG; }
		if (/^t|test/i)            { test(); next ARG; }
		if (/^u|usage|help|^h/i)   { usage();}
		print "ERROR: unknown option: $_ \n"; usage();
	}
}

exit 0;

###############################################################################
sub initialize{
# username
$username = getlogin();
use Cwd; # $home = cwd();

#default repository
$cvsrep = "tahoe.ca.sandia.gov:/cvs/protected/tahoe"; 

%module2define = qw(
expat	EXPAT_
toolbox	TB_
tahoe	NODEFINE
macros	NODEFINE
spooles SPOOLES_
f2c	F2C_
blas	BLAS_
access	AX_
);

%connect2command = qw(
cvs     cvs
http	curl
);

$config_file = "./.tahoe_config";
if(-e "$config_file") { read_config();}
else                  { write_default_config();}

print ">   connection: $connection \n";
if ($proxy !~ /NONE/) {
	print ">        proxy: $proxy \n";
}
print "> architecture: $arch \n"; 

# 2DO : rewrite this
# check connection method
$connect_OK = 0;
open(WHICH, "which $connect2command{$connection} |");
if (defined($which = <WHICH>)) {
	chomp($which);
	if (-x $which) { $connect_OK = 1; }
}
close(WHICH);
if ($connect_OK != 1) {
	print "ERROR: command \"$connect2command{$connection}\" not found\n";
	if ($connection =~ /http/) {
		print "ERROR: curl is available from http://curl.haxx.se/\n";
	}
#	exit;
}

# check cvs settings
if ($connection =~ /cvs/) {

	$cvs_OK = 0;
	foreach $key (sort(keys %ENV)) {
		if ($key =~ /CVS_RSH/ && $ENV{$key} =~ /ssh/) { $cvs_OK = 1; }
	}
	if ($cvs_OK != 1) {
		print "ERROR: CVS_RSH must be set to ssh\n";
		exit;
	}
}

sub read_config{
print "* reading config file $config_file\n";
open(CONFIG,$config_file) || die "cannot open file $config_file for reading : $!";
$type = "UNKNOWN";
while(<CONFIG>) {
	s/^\s+//; s/\s+$//; @list = split(/ +/);
 	if (defined($list[0])){
        	if (/^\#/ ){ 
			if     ($type  =~ /CONNECTION/){$connection = $tmp_list[0];}
			elsif  ($type  =~ /PROXY/){$proxy = $tmp_list[0];}
			elsif  ($type  =~ /ARCH/){$arch = $tmp_list[0];}
 			elsif  ($type  =~ /MODU/){@modules = @tmp_list;}
 			$type = $list[1]; @tmp_list =();
 		} 
 		else { push(@tmp_list,@list);}
 	}
}
close(CONFIG);

# need to make sure the core modules exist

# need to sort modules based on dependencies
@tmp_modules = @modules;
@modules = sort by_depend @tmp_modules;
}
}

sub write_default_config{
print "* creating default config file $config_file\n";

# connection type
@connections = ("cvs", "http");
$i=0;foreach $choice (@connections) { print "$i $choice\n"; $i++; }
print "select connection type [cvs]: ";
$i = <STDIN>;
chomp($i);
if (length($i) == 0) { # default
	$i = 0;
}
$connection = $connections[$i];
$proxy = "NONE";
if ($connection =~ /http/) { # ask for proxy
	print "http proxy (proxyhost:port) [NONE]:";
	$proxy = <STDIN>;
	chomp($proxy);
	if (length($proxy) == 0) { # default
		$proxy = "NONE";
	}
}

# get macros module
unless(-d "macros") {
	if ($connection =~ /cvs/) {
		print "checking out macros\n";
		unlink("cvs.log");
		system("cvs -d $username\@$cvsrep checkout macros > cvs.log 2>&1");
	} elsif ($connection =~ /http/) {
	
		# grab new copy
		$curl_cmd = "curl http://tahoe.ca.sandia.gov/download/nightly/macros.tar.gz --remote-name --connect-timeout 10";
		if ($proxy !~ /NONE/) {
			$curl_cmd = $curl_cmd." --proxy $proxy";
		}
		system("$curl_cmd") == 0
			or die "ERROR: curl failed. Check connection or proxy ($proxy)";

		# unpack
		system("gunzip macros.tar.gz");
		system("tar xf macros.tar");
		system("rm macros.tar");
	}
	else {
		print "ERROR: unrecognized connection '$connection'\n";	
		exit;
	}
}

# architecture
chdir "macros"; 
@macros = glob("*.macros"); 
foreach $choice (@macros) { $choice =~ s/\.macros//; push(@choices,$choice);}
chdir "..";
print "no default build architecture, choices:\n";
$i=0;foreach $choice (@choices) { print "$i $choice\n"; $i++;}
print "? "; $i = <STDIN>; $arch = $choices[$i]; 
print "* you chose : $arch\n";

# modules
@modules = ("macros","expat","toolbox","tahoe");
open(CONFIG,">$config_file") || die "cannot open file $config_file for writing : $!";
print CONFIG  "# CONNECTION\n$connection\n\n";
print CONFIG  "# PROXY\n$proxy\n\n";
print CONFIG  "# ARCHITECTURE\n$arch\n\n";
print CONFIG  "# MODULES\n@modules\n\n";
print CONFIG  "# EOF";
close(CONFIG);
}

sub update{
	if ($connection =~ /cvs/) {
		update_cvs();
	} elsif ($connection =~ /http/) {
		update_http();	
	}
	else {
		print "ERROR: unrecognized connection '$connection'\n";	
		exit;
	}
}

sub update_cvs{
	$time = localtime();
	print "($count) updating: @modules, at $time\n";
	unlink("cvs.log");
	foreach $dir (@modules) {
		if(-d $dir) {
			print "\tupdating $dir";
			system("cd $dir; cvs update -Pd > ../cvs.log 2>&1");
			print " ...done\n";
		} else {
			print "\tchecking out $dir";
			system("cvs -d $username\@$cvsrep checkout $dir > cvs.log 2>&1");
			print " ...done\n";
		}
		# check for failures
		open(IN,"cvs.log");
		@lines = <IN>; $file = "@lines"; close(IN); 
		$errors = ($file =~ /^C /);
                if($errors > 0) {$script_status++;}
	}
}

sub update_http{
	$time = localtime();
	print "($count) updating: @modules, at $time\n";
	foreach $dir (@modules) {
		print "\tupdating $dir...\n";
		
		# grab new copy
		$curl_cmd = "curl http://tahoe.ca.sandia.gov/download/nightly/$dir.tar.gz --remote-name --connect-timeout 10";
		if ($proxy !~ /NONE/) {
			$curl_cmd = $curl_cmd." --proxy $proxy";
		}
		system("$curl_cmd") == 0
			or die "ERROR: curl failed. Check connection or proxy ($proxy)";

		# move existing directory aside
		if(-d $dir) {

			# parse the date
			($sec, $min, $hour, $mday, $mon, $year, , , ) = localtime;
			$the_date = sprintf("%02d%02d%04d-%02d:%02d:%02d", $mon+1, $mday, $year+1900, $hour, $min, $sec);

			# rename
			if (! -d "saved") {
				system("mkdir saved");
			}
			system("mv $dir saved/$dir.$the_date");
		} 
			
		# unpack
		system("gunzip $dir.tar.gz");
		system("tar xf $dir.tar");
		
		# clean up
		system("rm $dir.tar");
	}
}

sub rebuild{
	$time = localtime();
	print "($count) rebuilding: @modules, at $time\n";
# winnow out "static" modules??
	foreach $dir (@modules) {
		chdir $dir;
		if (-e "makefile") {
			print "\tmaking $dir";
			unlink("build.log");
			system("make build > build.log 2>&1");
			# check for errors	
			open(IN,"build.log");
			@lines = <IN>; $file = "@lines"; close(IN); 
			$errors = ($file =~ / error /i);
                	if($errors > 0) {print " ...ERROR\n";$script_status++;}
			else            {print " ...done\n";}
		}
		chdir "..";
	}
}

sub build{
	$time = localtime();
	print "($count) building: @modules, at $time\n";
	foreach $dir (@modules) {
		chdir $dir;
		if (-e "makefile.template") {
			fillin_makefile();
			print "\tmaking $dir";
			unlink("build.log");
			system("rm -rf src-mirror obj object_list");
			system("make init build > build.log 2>&1");
			# check for errors	
			open(IN,"build.log");
			@lines = <IN>; $file = "@lines"; close(IN); 
			$errors = ($file =~ / error /i);
                	if($errors > 0) {print " ...ERROR\n";$script_status++;}
			else            {print " ...done\n";}
		}
		chdir "..";
	}
}

sub test{
	$time = localtime();
	print "($count) running tests at $time\n";
 	unless(-d "benchmark"){
		print "checking out benchmark\n";
		unlink("cvs.log");
		system("cvs -d $username\@$cvsrep checkout benchmark > cvs.log 2>&1");
 	} else {
		system("cd benchmark; cvs update -Pd > cvs.log 2>&1");
	}
	chdir("benchmark/comparator");
	print("\tbuilding comparator");
	fillin_makefile(); system("make init build > build.log 2>&1");
	print(" ...done\n");
	chdir("..");
	print("\trunning benchmarks");
	system("../tahoe/tahoe -f run.batch > run.out 2>&1");
	print(" ...done\n");
	print("\tcomparing benchmarks");
	system("./comparator/compare -f run.batch > compare.out 2>&1");
	print(" ...done\n");
	open(IN,"compare.summary");
	<IN>; 
	$_ = <IN>; chomp(); s/^\s+//; s/\s+$//; $pass = $_;   
	$_ = <IN>; chomp(); s/^\s+//; s/\s+$//; $fail = $_;   
	print "* $pass $fail, see compare.summary for more details\n";
}

sub failed{
	$time = localtime();
	die "*-*-*-* process FAILED at $time *-*-*-*\n";
}

sub usage{
	print "\nusage: tahoe-manager [list of keywords and options]\n";
	print "       update  : updates or checks out modules\n";
	print "       build   : builds modules \n";
	print "       rebuild : rebuilds modules \n";
	print "       test    : runs regression tests\n";
	exit 1;
}

sub by_depend {
	$filename = "$a/makefile.template";
	$a_on_b = -1;
	if (-e $filename) {
		open(IN,"$filename");
		@lines = <IN>; $afile = "@lines"; 
		close(IN);
		$bdefine = $module2define{$b}; 
 		$a_on_b = ($afile =~ /$bdefine/);
		unless($a_on_b > 0) {$a_on_b = 0;}
	}

	$filename = "$b/makefile.template";
	$b_on_a = -1;
	if (-e $filename) {
		open(IN,"$filename");
		@lines = <IN>; $bfile = "@lines"; 
		close(IN);
		$adefine = $module2define{$a};
	        $b_on_a = ($bfile =~ /$adefine/);
		unless($b_on_a > 0) {$b_on_a = 0;}
	}

	#print " $a $a_on_b $b $b_on_a \n";

        ($a_on_b <=> $b_on_a);
}

sub fillin_makefile{
	unlink("makefile");
	$path = cwd();
# search for system libs
	$sys_ACCESS = 0;
	foreach $key (sort(keys %ENV)) {
		if ($key =~ /ACCESS/ ) { $sys_ACCESS = 1; }
	}
	open(IN,"makefile.template");
	open(OUT,">makefile");
	while (defined($line = <IN>)){
		$line =~ s/HOME_DIR =/HOME_DIR = $path/;
		$line =~ s/ARCH =/ARCH = $arch/;
		foreach $module (@modules) {
			$define = $module2define{$module};
			$line =~ s/\#$define/$define/;
		}
		if ($sys_ACCESS) {
			$define = $module2define{"access"};
			$line =~ s/\#$define/$define/;
		}
		print OUT "$line";
 	}
	close(IN);
	close(OUT);
}

