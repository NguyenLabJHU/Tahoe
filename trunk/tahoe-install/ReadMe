# $Id: ReadMe,v 1.2 2005-03-11 02:11:11 rjones Exp $

0. GENERAL
The "tahoe-manager" is a PERL script (i.e. you'll need an installation of perl,
type "which perl" to see if it is in your PATH) that manages nearly all the 
procedures necessary to build the analysis code tahoe and its supporting
libraries. If you type
> tahoe-manager
...you'll get a usage splash :

usage: tahoe-manager [list options]
       build   : builds modules (calls init if needed)
       config  : change build options
       update  : updates or checks out modules
   selfupdate  : updates this script
       init    : creates makefiles and initializes modules
       clean   : cleans modules
       test    : runs regression tests

...after some initial checking and configuration. By typing 
> tahoe-manger build 
...after the initial checkout of the "tahoe-install" module, the
script will walk you through the configuration and build process.
You'll need either a "cvs" or an "http" connection to get the source code
from the tahoe server.  You'll also need to know a bit about the compilers
on your system since you'll have to chose a set of build rules called a 
"macro" to compile the code with. Lastly, you'll be able to choose all the 
additional libraries (packaged in cvs "modules") that you might need to 
enhance the basic version of "tahoe" e.g. you can add "spooles" to 
enlarge the number of solvers that are availible. 


1. ADVANCED
There are a number of modifications you can make to the basic behavior of the 
script. First, take a look at ".tahoe_config" e.g.

# TAHOE_LOGIN
rjones

# CONNECTION
cvs

# PROXY
NONE

# ARCHITECTURE
GNU.linux

# USE_DEFAULT
true

# MODULES
macros expat toolbox tahoe spooles CBLAS f2c development

# VERBOSE
false

# EOF

... you can edit any of these field to adjust the local defaults. For instance
you can change the lines above to read 

# VERBOSE
true

to get detailed information about the build process. Also you could change

# USE_DEFAULT
true

to allow for different macros to be used by different modules.

Also the script will pick up various environmental variables:

ACCESS  = [location of the ExodusII system libraries]
TAHOE_HOME = [location of your installation of tahoe]
TAHOE_ARCH = [which macro to use]
TAHOE_CONNECT = [which type of connection to use: "http" || "cvs"]
CVS_RSH = [which type of cvs connection to use, should be "ssh"]
TAHOE_BUILD = [if this is "default" only the core modules will be built]

... none of these variables are required, but the can speed up initial
configuration if they are placing in a shell start-up script like ".cshrc".
The "PATH" and "USER" environmental variables are also used.
