/* $Id: XML_Atomic_FormatterT.cpp,v 1.1 2002-11-16 20:50:21 paklein Exp $ */
#include "XML_Atomic_FormatterT.h"
#include "ParameterT.h"

using namespace Tahoe;

void XML_Atomic_FormatterT::SetDTD(const StringT& dtd_path, const StringT& doc_root)
{
	fDTD = dtd_path;
	fDocumentRoot = doc_root;
}

bool XML_Atomic_FormatterT::InitParameterFile(ostream& out) const
{
	/* write XML header */
	out << "<?xml encoding='US-ASCII' standalone='no' ?>" << '\n';

	/* DTD is set */
	if (fDTD.StringLength() > 0)
		out << "<!DOCTYPE " << fDocumentRoot << " SYSTEM \"" << fDTD << "\">" << '\n';
	
	out.flush();
	return true;
}

bool XML_Atomic_FormatterT::CloseParameterFile(ostream& out) const
{
	/* add extra newline and flush */
	out << endl;
	return true;
}

#if 0
bool XML_Atomic_FormatterT::WriteParameter(ostream& out, const ParameterT& parameter) const
{
	out << Tab() << "<parameter>" << '\n';
	TabOut();
	out << Tab() << "<name>"  << parameter.Name() << "</name>" << '\n';
	out << Tab() << "<value>"; 
	parameter.Write(out); 
	out << "</value>" << '\n';
	TabIn();
	out << Tab() << "</parameter>" << '\n';

	return true;
}
#endif

bool XML_Atomic_FormatterT::InitDescriptionFile(ostream& out) const
{
	out << "<?xml version='1.0' encoding='US-ASCII' ?>" << endl;
	
	out << '\n'; 
	out << "<!--Generated by Tahoe::XML_Atomic_FormatterT $Revision: 1.1 $-->" << '\n';
	out << '\n';
	out << "<!--defintion of Tahoe::ParameterT-->" << '\n';
	out << "<!ELEMENT parameter_list (name, parameter*)>" << '\n';
	out << '\n';
	out << "<!ELEMENT parameter (name, value)>" << '\n';
//	out << "<!ATTLIST parameter type (Integer | Double | String | Enumeration) #REQUIRED>" << '\n';
	out << '\n';
	out << "<!ELEMENT name (#PCDATA)>" << '\n';
//	out << "<!ATTLIST name  e-dtype NMTOKEN  #FIXED 'string'>" << '\n'; //allows empty strings
	out << '\n';
	out << "<!ELEMENT value (#PCDATA)>" << '\n';
	
	out << endl;
	return true;
}


bool XML_Atomic_FormatterT::CloseDescriptionFile(ostream& out) const
{
	/* add extra newline and flush */
	out << endl;
	return true;
}

bool XML_Atomic_FormatterT::WriteDescription(ostream& out, const ParameterT& parameter) const
{
	return true;
}
