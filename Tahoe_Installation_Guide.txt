### INSTALLING TAHOE on macOS
# Parallel version of TAHOE was downloaded and installed on macOS Catalina 10.15.

## STEP 1: DOWNLOADING and INSTALLING TAHOE DEPENDENCY

#1. If you don't have an x11 client, download and install XQuartz
# Visit https://www.xquartz.org for download. Installation is trivial.
# In case you are using macOS via terminal, install XQuartz later using homebrew.

#2. In case you don't have zsh profile set up on mac, open a profile from terminal.
# We will use this file later to save environment variables and path.
$ open ~/.zshrc

#3. Save and close the file

#4. Download and install homebrew 
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

#5. Give read and write permission for homebrew
$ sudo chown -R $(whoami) $(brew --prefix)/*

#6. You can install XQuartz using homebrew in case you haven't done it #1.
# Skip the step if you already have XQuartz installed
$ brew install --cask xquartz

#7. Install the following packages using homebrew
$ brew install wget
$ brew install cmake
$ brew install automake
$ brew install open-mpi

#8. Current version of open-mpi has dependency on gcc-11, g++-11, gfortran-11
# Make sure to check the version of gcc, g++, gfortran from following directory
$ cd /usr/local/bin

#9. Create symlink for newer version of gcc, g++, gfortran available via open-mpi
$ ln -s gcc-11 gcc
$ ln -s g++-11 g++
$ ln -s gfortran-11 gfortran

#10. log out of your zsh terminal to activate these and log back in.

#11. Go to home directory, create a directory for TAHOE
$ cd 
$ mkdir tahoe && cd tahoe

#12. Clone ACCESS, install third-party libraries (TPL), and finally install ACCESS
# These instructions are also available on SEACAS github webpage
$ git clone https://github.com/gsjaardema/seacas.git
$ cd seacas
$ ./install-tpl.sh
$ mkdir build && cd build
## Use cmake-exodus instead of cmake-config for exodus file format to be used in TAHOE
$ ../cmake-exodus
$ make && make install

#13. Export the following envrionment variables to your zsh profile
$ TAHOE_MAIN=$PWD
$ echo export TAHOE_MAIN=$TAHOE_MAIN >> ~/.zshrc
$ echo export ACCESS=$TAHOE_MAIN/seacas >> ~/.zshrc
$ echo export LD_LIBRARY_PATH=$ACCESS/lib >> ~/.zshrc
$ echo export CVS_RSH=ssh >> ~/.zshrc
$ source ~/.zshrc

#14. Create symlink for following libraries (for first time installation of ACCESS)
$ cd $ACCESS
$ ln -s include/ inc
$ cd lib
$ ln -s libexodus.dylib libexoIIv2c.dylib
$ ln -s libexodus.a libexoIIv2c.a

#15. log out of your zsh terminal to activate these and log back in.


## STEP 2: DOWNLOADING AND INSTALLING TAHOE

#16. Download TAHOE-Installer from Nguyen Lab OneDrive.
# This version isn't available on SourceForge yet.

#17. Create a tahoe-backup directory and download the all the modules for tahoe.
$ cd  $TAHOE_MAIN
$ mkdir tahoe-backup
$ cd tahoe-backup

#18. Set the following variables for ease of using commands
# Make sure to use the correct directory
$ TAHOE_DOWNLOAD=/Users/bibek/Downloads/TAHOE-Installer
$ TAHOE_BACKUP=$TAHOE_MAIN/tahoe-backup

#19. Copy and paste the tahoe-manager to the back-up directory
$ cp -i $TAHOE_DOWNLOAD/tahoe-manager $TAHOE_BACKUP

#20. In case tahoe-manager isn't an executable already, do ...
$ sudo chmod 755 ./tahoe-manager

#21. Run tahoe-manager to download all the modulues
$ ./tahoe-manager

#22. Chose svn as connection type, enter sourceforge account name.
# Chose any architecture type to continue downloading the modules

#23. For optional modulues, chose: 0 6 8 10 11 12 13 14 15 16
# (CBLAS, ACCESS, benchmark_XML, contrib, development, ...
# development_benchmark_xml, f2c, metis, spooles, spoolesMPI)

#24. Copy the new macro files (GNU-GCC-MPI-9.3 and GNU-GCC-9.3) from
# TAHOE-Installer to the ~/tahoe/tahoe-backup/macros directory
# Even though the template file was generated for GCC-9.3,
# it works with newer version of GCC and open-MPI
$cp -i $TAHOE_DOWNLOAD/*.macros $TAHOE_BACKUP/macros

#25. Clean all the settings before making a copy of the back-up directory
# for installation purpose. 
# Chose all the settings as before.
$ ./tahoe-manager clean

#26. Make a copy of the back-up directory for installation and rename it.
$ cd $TAHOE_MAIN
$ cp -r tahoe-backup tahoe-install

#27. Go to the installation directory and run tahoe-manager 
# to update the installation settings with correct architecture.
$ ./tahoe-manager update

#28. Select all the settings and modules as before.
# This will update the directory and generate the make files for different modules

#29. For parallel version of TAHOE, update TAHOE makefile as follows:
# From "AX_LFLAGS  = -L$(ACCESS)/lib -lexoIIv2c -lnetcdf"
# to "AX_LFLAGS  = -L$(ACCESS)/lib -lexoIIv2c -lnetcdf -lhdf5"
# In future, makefile.template will be updated for these modules

#30. Build and compile TAHOE
$ ./tahoe-manager build

#31. Add following environment variables and path to your zsh profile
$ echo export TAHOE_MOD=$TAHOE_MAIN/Tahoe-Install >> ~/.zshrc
$ echo export TAHOE_DIR=$TAHOE_MOD/tahoe >> ~/.zshrc
$ echo export PATH=$PATH:$TAHOE_MOD/bin >> ~/.zshrc
$ source ~/.zshrc



### INSTALLING TAHOE on Ubuntu 20.04
# Parallel version of TAHOE was downloaded and installed on Ubuntu via WSL.

#1. Download the latest version of TAHOE-Installer from 
# Nguyen Lab OneDrive to /mnt/c/Users/bdatta1/Downloads

#2. Go to your home directory, create a directory for 
# downloading and installing tahoe modules and its dependencies:
$ cd
$ mkdir tahoe && cd tahoe
$ mkdir tahoe-backup && cd tahoe-backup

#3. Set following variables for ease of usage. 
# Make sure to use the correct directory.
$ TAHOE_DOWNLOAD=/mnt/c/Users/bdatta1/Downloads/TAHOE-Installer
$ TAHOE_MAIN=/home/bibek/TAHOE
$ TAHOE_BACKUP=/home/bibek/TAHOE/tahoe-backup

#4. Copy install_pre.sh and tahoe-manager to tahoe-backup and tahoe directory:
$ cp -i $TAHOE_DOWNLOAD/install_pre.sh $TAHOE_MAIN
$ cp -i $TAHOE_DOWNLOAD/tahoe-manager $TAHOE_BACKUP

#5. Open install_pre.sh using a text editor (for example, VS Code) and 
# change the installation directory variable, $TAHOE_MAIN, within the file. 
# Save and close the file.
$ code install_pre.sh

#6. Change the permission for install_pre.sh to make it an executable. 
# Run the script to download and install pre-requisite packages for TAHOE.
$ chmod a+x tahoe_pre.sh
$ ./install_pre.sh

#7. Log out of the bash shell to activate the change and log back in.

#8. Set following variables for ease of usage:
# Needs to be re-done because terminal was closed.
$ TAHOE_DOWNLOAD=/mnt/c/Users/bdatta1/Downloads/TAHOE-Installer
$ TAHOE_BACKUP=/home/bibek/TAHOE/tahoe-backup

#9. Go to the tahoe-backup directory. 
# Run tahoe-manager to download the macros, default modules, and optional modulues:
$ cd $TAHOE_BACKUP
$ ./tahoe-manager

#10. Chose svn as connection type, enter sourceforge account name.
# Chose any architecture type to continue downloading the modules

#11. For optional modulues, chose: 0 6 8 10 11 12 13 14 15 16
# (CBLAS, ACCESS, benchmark_XML, contrib, development, ...
# development_benchmark_xml, f2c, metis, spooles, spoolesMPI)

#12. Copy the new macro files (GNU-GCC-MPI-9.3 and GNU-GCC-9.3) from
# TAHOE-Installer to the ~/tahoe/tahoe-backup/macros directory
# Even though the template file was generated for GCC-9.3,
# it works with newer version of GCC and open-MPI
$ cp -i $TAHOE_DOWNLOAD/*.macros $TAHOE_BACKUP/macros
 
#13. Clean all the settings before making a copy of the back-up directory
# for installation purpose. 
# Chose all the settings as before.
$ ./tahoe-manager clean

#14. Make a copy of the back-up directory for installation and rename it.
$ cd $TAHOE_MAIN
$ cp -r tahoe-backup tahoe-install

#15. Go to the installation directory and run tahoe-manager 
# to update the installation settings with correct architecture.
$ cd tahoe-install
$ ./tahoe-manager update

#16. Select all the settings and modules as before.
# This will update the directory and generate the make files for different modules

#17. For parallel version of TAHOE, update TAHOE makefile as follows:
# From "AX_LFLAGS  = -L$(ACCESS)/lib -lexoIIv2c -lnetcdf"
# to "AX_LFLAGS  = -L$(ACCESS)/lib -lexoIIv2c -lnetcdf -lhdf5"
# In future, makefile.template will be updated for these modules

#18. Build and compile TAHOE
$ ./tahoe-manager build

#19. Add following environment variables and path to your bash profile
$ echo export TAHOE_MOD=$TAHOE_MAIN/Tahoe-Install >> ~/.bashrc
$ echo export TAHOE_DIR=$TAHOE_MOD/tahoe >> ~/.bashrc
$ echo export PATH="$TAHOE_MOD/bin:$PATH" >> ~/.bashrc
$ source ~/.bashrc