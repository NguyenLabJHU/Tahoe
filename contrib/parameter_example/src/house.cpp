/* $Id: house.cpp,v 1.1.2.1 2003-04-28 08:17:08 paklein Exp $ */#include "house.h"#include "lawn.h"#include "AutoArrayT.h"#include "StringT.h"/* rooms */#include "closet.h"#include "bedroom.h"house::house(void):	ParameterInterfaceT("house"),	style_(undefined),	zipcode_(-1),	basement_(NULL),	lawn_(NULL){}house::~house(void){	for (int i = 0; i < rooms_.Length(); i++)		delete rooms_[i];}void house::DefineParameters(ParameterListT& list) const{	if (list.Name() == "rooms")	{		list.SetInline(true);		list.SetListOrder(ParameterListT::Choice);		ParameterInterfaceT* closet = NewSub("closet");		ParameterListT closet_params("closet");		closet->DefineParameters(closet_params);		list.AddList(closet_params);		delete closet;		ParameterInterfaceT* bedroom = NewSub("bedroom");		ParameterListT bedroom_params("bedroom");		bedroom->DefineParameters(bedroom_params);		list.AddList(bedroom_params);		delete bedroom;	}	else	{		/* inherited */		ParameterInterfaceT::DefineParameters(list);		list.AddParameter(zipcode_, "zipcode");			ParameterT the_style(ParameterT::Enumeration, "style");		the_style.AddEnumeration("colonial", colonial);		the_style.AddEnumeration("ranch", ranch);		the_style.AddEnumeration("split_level", split_level);		list.AddParameter(the_style);	}}void house::SetParameters(const ParameterListT& list){	const char caller[] = "house::SetParameters";	/* my parameters */	list.GetParameter("zipcode", zipcode_);	list.GetParameter("style", enum2int<style>(style_));	/* the roof */	const ParameterListT* roof_params = list.List("roof");	if (!roof_params) ExceptionT::GeneralFail(caller, "cannot find \"roof\"");	roof_.SetParameters(*roof_params);	/* the driveway */	const ParameterListT* driveway_params = list.List("driveway");	if (!driveway_params) ExceptionT::GeneralFail(caller, "cannot find \"driveway\"");	driveway_.SetParameters(*driveway_params);	/* the driveway */	const ParameterListT* lawn_params = list.List("lawn");	if (lawn_params) {		lawn_ = new lawn;		lawn_->SetParameters(*lawn_params);	}}void house::SubNames(ArrayT<StringT>& names, ArrayT<ParameterListT::OccurrenceT>& occur,	ArrayT<bool>& is_inline) const{	/* temporaries */	AutoArrayT<StringT> names_tmp;	AutoArrayT<ParameterListT::OccurrenceT> occur_tmp;	AutoArrayT<bool> is_inline_tmp;	/* the roof */	names_tmp.Append("roof");	occur_tmp.Append(ParameterListT::Once);	is_inline_tmp.Append(false);	/* the driveway */	names_tmp.Append("driveway");	occur_tmp.Append(ParameterListT::Once);	is_inline_tmp.Append(false);	/* the lawn */	names_tmp.Append("lawn");	occur_tmp.Append(ParameterListT::ZeroOrOnce);	is_inline_tmp.Append(false);	/* the rooms */	names_tmp.Append("rooms");	occur_tmp.Append(ParameterListT::OnePlus);	is_inline_tmp.Append(true);		/* copy to return values */	names = names_tmp;	occur = occur_tmp;	is_inline = is_inline_tmp;}ParameterInterfaceT* house::NewSub(const StringT& list_name) const{	if (list_name == "roof") {		return new roof;	}	else if (list_name == "driveway") {		return new driveway;	}	else if (list_name == "lawn") {		return new lawn;	}	else if (list_name == "closet") {		return new closet;	}	else if (list_name == "bedroom") {		return new bedroom;	}	else /* inherited */		return ParameterInterfaceT::NewSub(list_name);}