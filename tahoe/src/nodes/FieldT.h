/* $Id: FieldT.h,v 1.1.2.3 2002-04-24 01:29:25 paklein Exp $ */

#ifndef _FIELD_T_H_
#define _FIELD_T_H_

/* base class */
#include "BasicFieldT.h"

/* direct members */
#include "iArrayT.h"
#include "dArrayT.h"
#include "IC_CardT.h"
#include "KBC_CardT.h"
#include "FBC_CardT.h"
#include "pArrayT.h"
#include "GlobalT.h"

/* forward declarations */
class LocalArrayT;
class nControllerT;
class KBC_ControllerT;
class FBC_ControllerT;
template <class TYPE> class RaggedArray2DT;
template <class TYPE> class AutoArrayT;
class ifstreamT;
class ofstreamT;
class FieldSupportT;

/** field with time integration. Includes application of initial and 
 * boundary conditions, and force boundary conditions. */
class FieldT: public BasicFieldT
{
public:

	/** inactive equation number codes */
	enum EquationCodeT {
	          kInit = 0, /**< uninitialized equation number */
		kPrescribed =-1, /**< dof has prescribed value */ 
	      kExternal =-2  /**< node is external */ };
	
	/** constructor */
	FieldT(const StringT& name, int ndof, nControllerT& controller);
	
	/** destructor */
	~FieldT(void);

	/** \name initialization */
	/*@{*/
	/** register the local array with its source */
	void RegisterLocal(LocalArrayT& array) const;

	/** set the group number */
	void SetGroup(int group) { fGroup = group; };

	/** set number of nodes. (Re-)allocates memory. */
	void Dimension(int nnd);	
	/*@}*/
	
	/** \name accessors */
	/*@{*/
	/** set the group number */
	int Group(void) const { return fGroup; };	
	
	/** time integrator */
	nControllerT& nController(void) { return fnController; };

	/** append connectivities generated by the KBC_ControllerT's and
	 * FBC_ControllerT's. */
	void Connectivities(AutoArrayT<const iArray2DT*>& connects_1,
		AutoArrayT<const RaggedArray2DT<int>*>& connects_2) const;

	/** return the GlobalT::SystemTypeT for the all the fields in the
	 * specified group */
	GlobalT::SystemTypeT SystemType(void) const;

	/** initial condition cards */
	ArrayT<IC_CardT>& InitialConditions(void) { return fIC; };
	
	/** kinematic boundary condition cards */
	ArrayT<KBC_CardT>& KinematicBC(void) { return fKBC; };

	/** prescribed nodal forces */
	ArrayT<FBC_CardT>& ForceBC(void) { return fFBC; };

	/** special kinematic boundary conditions. Controllers put in this array
	 * are deleted when this field goes out of scope. */
	pArrayT<KBC_ControllerT*>& KBC_Controllers(void) { return fKBC_Controllers; };

	/** special force boundary conditions. Controllers put in this array
	 * are deleted when this field goes out of scope. */
	pArrayT<FBC_ControllerT*>& FBC_Controllers(void) { return fFBC_Controllers; };
	/*@}*/

	/** \name time integration */
	/*@{*/
	/** beginning of time series */
	void InitialCondition(void);
	
	/** apply predictor to all degrees of freedom */
	void InitStep(void);

	/** assemble contributions to the residual */
	void FormRHS(const FieldSupportT& support);

	/** assemble contributions to the tangent */
	void FormLHS(const FieldSupportT& support);

	/** update the active degrees of freedom */
	void Update(const dArrayT& update, int eq_start, int num_eq);
	
	/** check for relaxation */
	GlobalT::RelaxCodeT RelaxSystem(void);

	/** update history */
	void CloseStep(void);

	/** reset displacements (and configuration to the last known solution) */
	void ResetStep(void);
	/*@}*/

	/** \name equation numbers */
	/*@{*/
	/** append the equation sets generated by the field. These include sets
	 * generated by the KBC_ControllerT's and FBC_ControllerT's. This call
	 * signals to the field that FieldT::Equations has been filled with
	 * up to date equation numbers. */
	void EquationSets(AutoArrayT<const iArray2DT*>& eq_1, 
		AutoArrayT<const RaggedArray2DT<int>*>& eq_2);

	/** mark prescribed equations. Prescribed values are marked first
	 * using the nodally prescribed kinematic boundary conditions
	 * followed by the KBC_ControllerT's. Equation numbers for prescribed
	 * values will be < 0. */
	void MarkPrescribedEquations(void);

	/** collect equation numbers.
	 * \param nodes element connectivities: [nel] x [nen]
	 * \param eqnos destination for equation numbers: [nel] x [nen*ndof] */
	void SetLocalEqnos(const iArray2DT& nodes, iArray2DT& eqnos) const;

	/** collect equation numbers. Connectivities are passed in a RaggedArray2DT, 
	 * which allows an arbitrary number of nodes per element.
	 * \param nodes element connectivities: [nel] x [nen_i]
	 * \param eqnos destination for equation numbers: [nel] x [nen_i*ndof] */
	void SetLocalEqnos(const RaggedArray2DT<int>& nodes, RaggedArray2DT<int>& eqnos) const;

	/** collect equation numbers */
	void SetLocalEqnos(const iArrayT& tags, iArray2DT& eqnos) const;
	/*@}*/

	/** \name restart functions
	 * The restart functions should read/write any data that overrides the
	 * default values */
	/*@{*/ 
	void ReadRestart(ifstreamT& in);
	void WriteRestart(ofstreamT& out) const;
	/*@}*/ 

	/** write output data */
	void WriteOutput(ostream& out) const;

	/** write field parameters to output stream */
	void WriteParameters(ostream& out) const;
	
	/** \name "ghost" node data */
	/*@{*/
	/** active/prescribed flags for "ghost" nodes */
	iArray2DT& ExternalEquations(void) { return fExEqnos; };

	/** space for the update for "ghost" nodes */
	dArray2DT& ExternalUpdate(void) { return fExUpdate; };
	/*@}*/

private:

	/** apply the IC_CardT to the field */
	void Apply_IC(const IC_CardT& card);

	/** mark global equations with the specified BC */
	void SetBCCode(const KBC_CardT& card);

	/** determine the destinations for the force boundary conditions */
	void SetFBCEquations(void);

private:

	/** solution set number */
	int fGroup;

	/** time integrator */
	nControllerT& fnController;
	
	/** field history. BasicFieldT::fField from the previous time step. */
	ArrayT<dArray2DT> fField_last;
	
	/** \name initial and kinematic boundary conditions */
	/*@{*/
	/** initial conditions */
	ArrayT<IC_CardT> fIC;
	  	
	/** kinematic boundary conditions */
	ArrayT<KBC_CardT> fKBC;

	/** special KBC objects */
	pArrayT<KBC_ControllerT*> fKBC_Controllers;
	/*@}*/

	/** \name force boundary conditions */
	/*@{*/
	/** nodal forces */
	ArrayT<FBC_CardT> fFBC;

	/** force vector */
	dArrayT fFBCValues;

	/** equations with applied forces */
	iArrayT fFBCEqnos;

	/** special FBC objects */
	pArrayT<FBC_ControllerT*> fFBC_Controllers;
	/*@}*/
	
	/** \name "ghost" node work space */
	/*@{*/
	/** free/prescribed ghost node equations */
	iArray2DT fExEqnos;	

	/** communication buffer */
	dArray2DT fExUpdate;
	/*@}*/
};

/* inlines */
inline void FieldT::SetLocalEqnos(const iArrayT& tags,
	iArray2DT& eqnos) const
{
	eqnos.RowCollect(tags,fEqnos);
}

#endif /* _FIELD_T_H_ */
