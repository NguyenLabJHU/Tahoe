This code is the ellip3d version with the granular stress and strain calculations.
For example, triaxialCompression() is the function with stress and strian calculation implemented.
The formulations of the stress and strain for granular material can be refered
to paper "http://dx.doi.org/10.1016/j.ijsolstr.2015.04.012".

(1) Newly added local variables in the stress and strain calculations in assembly::triaxialCompress()
    matrix granularStress(3,3);
    matrix granularStrain(3,3);	// granular strain, Bagi's strain, equation (2)
    matrix previousStrain(3,3);
    matrix previousEuler(3,3);
    matrix finiteStrain(3,3);	// finite granular strain. Equation (6)
    matrix lag_HOT(3,3);	// mixed finite granular strain. Higher Order Term in Lagrangial strain tensor, i.e. equation (6)
    matrix eulerianStrain(3,3);	// eulerian granular strain. Equation (11)
    matrix euler_HOT(3,3);	// Higher Order Term in Eulerian strian tensor, i.e. equation (11)
    matrix previousEuler_HOT(3,3);
    matrix previousEuler_dudx(3,3);	// used to test quadratic terms, April 22, 2013
    matrix previousBagi_dudx(3,3);
    matrix spatial_dvdx(3,3);	// average spatial velocity gradient tensor, equation (17)

    matrix curr_rate(3,3);	// current spatial deformation rate tensor, July 8, 2013, equation (22)
    matrix curr_dvdx(3,3);	// current spatial velocity gradient tensor
    matrix prev_strain_rate(3,3);
    matrix curr_strain_rate(3,3);	// current strain based on deformation rate tensor, rate term in equation (18) and (19)

(2) Tesselation generation by calling external executable file "qhull"
    // first tessellation, this tessellation is for strain calculations
    createInputForQhull();
    callQhull();
    readTesse("tess_info");
    readTesse_finite("tess_info");
    cellVec_init = cellVec;	// keep cellVec_init for lagrangian strain unchanged 

(3) The main part to calculate the stress and strain in triaxialCompression() is just before the output "progressinf"

(4) Newly added class
    a, cell. This is used in the strain calculations by our method. This class means the tetrahedral element
    b, edge. This is only used in the strain calculations by Bagi's method. This class means the edge of the tetrahedral mesh, as in equation (2)
    c, matrix. This is second order tensor class.

(5) Newly added functions in assembly.h
  matrix getGranularStress() const;	// calculate the granular stress, written on Feb 13, 2013, return a 3x3 matrix
  matrix getFabric() const;	// calculate the fabric tensor, written on March 8, 2013, return a 3x3 matrix. unit is m^2
  // for granular strain calculation, written on Feb 18, 2013
  void callQhull() const;	// based on input_for_Qhull that is from createInputForQhull() to tessellate and output "tess_info"
  void resetStartPosition();	// reset the initial position of each particle. For granular strain March 18, 2013
  void setThreshold(REAL threshold) { strainThreshold = threshold;}
  matrix getum(int ID, int type) const;	// calculate the displacement vector of particle ID, retur a 3x1 matrix
  matrix getb(cell, int ID) const;	// calculate the b vector of a cell, return a 3x1 matrix
  matrix getdmn(edge, std::vector<cell>) const;	// calculate the complementary area vector of edge
  matrix getGranularStrain();	// calculate granular strain, not just granular e
  void createInputForQhull() const;	// create input file for Qhull. March 18, 2013
  void readTesse(const char* str);	// create tessellation information from Qhull output files, finally it will not be used siince we need to call Qhull within the ellip3d code
  // for finite granular strain calculation, March 26, 2013
  void readTesse_finite(const char* str);	// create cell information into std::vector<cell> cellVec from Qhull out put files
  void setNumberingOrder();	// ensure that the numbering of each tetrahedron in std::vector<cell> cellVec is couter-clockwise
  matrix getBigB(const cell&) const;
  matrix getdudx(const cell&) const;	// calculate the matrix dudx, which is for F=dudx+I
  matrix getdudx_curr(const cell&) const;	// calculate the matrix dudx with respect to current configuration
  REAL getCellVolume(const cell&) const;	// calculate the volume of cell
  matrix getFiniteStrain();	// calculate finite granular strain using FEM-similar way
  matrix getHigherStrain() const;	// calculate 1/(2V)*sum(dudx'*dudx*vL), for mixed finite strain
  matrix getEulerianStrain();	// calculate Eulerian finite strain
  matrix getEuler_HOT()	const;
  matrix getdvdx_curr(const cell&) const;	// calculate spatial velocity gradient tensor for each tet, June 24, 2013
  matrix getAverage_dvdx() const;	// calculate average spatial velocity gradient tensor, June 24, 2013

(6) Newly added class members in assembly.h

  std::map<edge, std::vector<cell> > edge_map;	// used to store the edge set from tessellation, for granular strain calculation, by Bagi's method
  std::vector<cell*> cellVec;	// used to store cell info, for finite granular strain calculation, March 26, 2013, by our method
  std::vector<cell*> cellVec_init;	// the initial cell vector, for lagrangian finite strain

  matrix average_dudx_Bagi;	// used to test quadratic terms (dudx)^T*dudx, April 22, 2013
  matrix average_dudx_Lagrangian;
  matrix average_dudx_Eulerian;




How to use ellip3d

1. compile

   1) edit main.cpp for your specific simulation type and parameters.
   2) edit parameter.cpp to change more parameters if necessary.
   3) edit makefile to toggle on/off OPENMP (on by default).
   4) make
   5) copy ellip3d, main.cpp, parameter.cpp to your simulation directory.

2. run

   serial mode: ./ellip3d &

   openmp mode: ./ellip3d n& 
   where n is the number of threads. It is recommended that n=4, 6 or 12 
   depending on your platform. This command line argument bypasses the 
   need of environment variable OMP_NUM_THREADS, which is usually set by 
   command export OMP_NUM_THREADS=n.
