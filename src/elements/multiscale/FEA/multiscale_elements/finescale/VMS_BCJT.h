//DEVELOPMENT

#ifndef _VMS_BCJT_H_ 
#define _VMS_BCJT_H_ 

#include "FineScaleT.h"

namespace Tahoe {

/** VMS_BCJTT: This class contains methods which build stiffness matricies 
 *  and formulate the non-linear Newton-Raphson equations Kd = -R
 *  for a Variational Multi-Scale (VMS) approach to implementation of Sandia's
 *  BCJT Model.  A dual field formulation u^alpha and u^beta is used. See
 *  Creighton et. al for more. 
 *  Collaboration:  Sandia National Laboratory and the University of Michigan **/


class VMS_BCJT : public FineScaleT
{

	public:

  	enum B_T { 
								kB, 
						   	kB_1hat,   
							 	kB05_tau_3hat,
							 	kB06_3hat,
								
								kBa_Cb_3hat,
							 	kBb_Cb_3hat,
								kBa_Cb_tau_3hat,
							 	kBb_Cb_tau_3hat,
								kBa_Cbi_3hat,
								kBb_Cbi_3hat,
								kBa_Cbi_tau_3hat,
								kBb_Cbi_tau_3hat,
								kBa_S,
								kBb_S,
								kBa_DEV_S, 
								kBb_DEV_S, 

								kB_Temp0,
								kB_Temp1,
	             	kNUM_B_TERMS };  // <-- Use for loops and count (KEEP THIS ONE LAST!!)

								
    enum A_T { 
							 	kDa_m,
						   	kgrad_ub,
						   	kFai,
						   	kFb,
								kFbT,
							 	kFa_n,
							 	kCa_n,
								kF_sharp,
								kN,
								kA1,
								kA2,
								kA3,
								kA1T,
								kA2T,
								kA3T,
							 	kDa_mp1,
						   	kCb,
						   	kCbi,
						   	kEb,
						   	kS,
						   	kDEV_S,
								kG2,
								kA_Temp0,
	             	kNUM_A_TERMS };  // <-- Use for loops and count (KEEP THIS ONE LAST!!)

								
    enum T4_T { 	//	4th order tensors in reduced form 

								kCC,			//	Doubled upper case represent black bold font 
								kMM,
								kPP,
								kMag_DEV_S_PP,
								kN_o_N,		
								kCbi_o_S,		// Outer product of (C^beta)^-1 and S  
								kCbi_o_Cb,
								kT4_Temp0,
	             	kNUM_T4_TERMS };  // <-- Use for loops and count (KEEP THIS ONE LAST!!)

								
    enum S_T { 	// Scalar values

								kMag_DEV_S,
								kBeta,
								kBeta2,
								kSinh_Beta,
								kCosh_Beta,
								kCb_i_S,		// Inner product of C^beta and S 
	             	kNUM_S_TERMS };  // <-- Use for loops and count (KEEP THIS ONE LAST!!)

 
    enum C_T { 
								kLamda,
								kMu,
								kf,
								kV,
								kY,
								kNeg_dt_Root3by2_f,
								kRoot3by2byV,
								k1byV,
								kYbyV,
								k1by3,
								kRoot3by2,
	             	kNUM_C_TERMS };  // <-- Use for loops and count (KEEP THIS ONE LAST!!)


	//--------------------------------------------------------------
	
 	VMS_BCJT	(	) { }
								
	VMS_BCJT	( FEA_ShapeFunctionT&, VMF_MaterialT*, VMS_VariableT&, VMS_VariableT&, 
														 double fdelta_t = 0.0, int IntegrationScheme = FEA::kBackward_Euler);

	void 	Construct ( FEA_ShapeFunctionT&, VMF_MaterialT*, VMS_VariableT&, VMS_VariableT&, 
								 double fdelta_t = 0.0, int Integration_Scheme = FEA::kBackward_Euler); 

  void 	Form_LHS_Ka_Kb	(	dMatrixT &Ka, dMatrixT &Kb ); 
  void 	Form_RHS_F_int	(	dArrayT &F_int ); 
	void 	Form_B_List 		( void );  // Strain Displacement Matricies
	void 	Form_A_S_Lists 	( VMS_VariableT &np1, VMS_VariableT &n ); // BCDE ---> A
	void 	Form_T4_List 		( void );  // Tensors generated by order reduction of 4th order Tensor
 	void 	Form_C_List 		( VMF_MaterialT *Iso_Matl );  // Constant List

	protected:

  	FEA_dMatrix_ArrayT    B; 	// Dimension: n_sd x n_sd*n_en , 		e.g. 9x24
		FEA_dMatrix_ArrayT    A; 	// Dimension: n_sd x n_sd , 					e.g. 3x3 
  	FEA_dMatrix_ArrayT   T4; 	// Dimension: n_sd*n_sd x n_sd*n_sd, e.g. 9x9 Matricies 
															// (Tensors generated from 3x3 outer 3x3 reduced order)
  	FEA_dScalar_ArrayT    S; 
  	dArrayT 			      	C; 
		
	protected:

		FEA_IntegrationT 		Integral;
		FEA_Data_ProcessorT Data_Pro; 

		int n_ip, n_rows, n_cols, n_sd, n_en, n_sd_x_n_sd, n_sd_x_n_en, Time_Integration_Scheme;
		double delta_t;
};

} // namespace Tahoe 
#endif /* _VMS_BCJT_H_ */

